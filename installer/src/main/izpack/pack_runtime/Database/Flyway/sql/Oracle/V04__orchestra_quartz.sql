CREATE TABLE QRTZ_CALENDARS
(
  CALENDAR_NAME  VARCHAR2(80 BYTE)              NOT NULL,
  CALENDAR       BLOB                           NOT NULL
);


CREATE TABLE QRTZ_FIRED_TRIGGERS
(
  ENTRY_ID           VARCHAR2(95 BYTE)          NOT NULL,
  TRIGGER_NAME       VARCHAR2(80 BYTE)          NOT NULL,
  TRIGGER_GROUP      VARCHAR2(80 BYTE)          NOT NULL,
  IS_VOLATILE        VARCHAR2(1 BYTE)           NOT NULL,
  INSTANCE_NAME      VARCHAR2(80 BYTE)          NOT NULL,
  FIRED_TIME         NUMBER(13)                 NOT NULL,
  PRIORITY           NUMBER(13)                 NOT NULL,
  STATE              VARCHAR2(16 BYTE)          NOT NULL,
  JOB_NAME           VARCHAR2(80 BYTE),
  JOB_GROUP          VARCHAR2(80 BYTE),
  IS_STATEFUL        VARCHAR2(1 BYTE),
  REQUESTS_RECOVERY  VARCHAR2(1 BYTE)
);


CREATE TABLE QRTZ_JOB_DETAILS
(
  JOB_NAME           VARCHAR2(80 BYTE)          NOT NULL,
  JOB_GROUP          VARCHAR2(80 BYTE)          NOT NULL,
  DESCRIPTION        VARCHAR2(120 BYTE),
  JOB_CLASS_NAME     VARCHAR2(128 BYTE)         NOT NULL,
  IS_DURABLE         VARCHAR2(1 BYTE)           NOT NULL,
  IS_VOLATILE        VARCHAR2(1 BYTE)           NOT NULL,
  IS_STATEFUL        VARCHAR2(1 BYTE)           NOT NULL,
  REQUESTS_RECOVERY  VARCHAR2(1 BYTE)           NOT NULL,
  JOB_DATA           BLOB
);


CREATE TABLE QRTZ_JOB_LISTENERS
(
  JOB_NAME      VARCHAR2(80 BYTE)               NOT NULL,
  JOB_GROUP     VARCHAR2(80 BYTE)               NOT NULL,
  JOB_LISTENER  VARCHAR2(80 BYTE)               NOT NULL
);


CREATE TABLE QRTZ_LOCKS
(
  LOCK_NAME  VARCHAR2(40 BYTE)                  NOT NULL
);


CREATE TABLE QRTZ_PAUSED_TRIGGER_GRPS
(
  TRIGGER_GROUP  VARCHAR2(80 BYTE)              NOT NULL
);


CREATE TABLE QRTZ_SCHEDULER_STATE
(
  INSTANCE_NAME      VARCHAR2(80 BYTE)          NOT NULL,
  LAST_CHECKIN_TIME  NUMBER(13)                 NOT NULL,
  CHECKIN_INTERVAL   NUMBER(13)                 NOT NULL
);


CREATE TABLE QRTZ_TRIGGERS
(
  TRIGGER_NAME    VARCHAR2(80 BYTE)             NOT NULL,
  TRIGGER_GROUP   VARCHAR2(80 BYTE)             NOT NULL,
  JOB_NAME        VARCHAR2(80 BYTE)             NOT NULL,
  JOB_GROUP       VARCHAR2(80 BYTE)             NOT NULL,
  IS_VOLATILE     VARCHAR2(1 BYTE)              NOT NULL,
  DESCRIPTION     VARCHAR2(120 BYTE),
  NEXT_FIRE_TIME  NUMBER(13),
  PREV_FIRE_TIME  NUMBER(13),
  PRIORITY        NUMBER(13),
  TRIGGER_STATE   VARCHAR2(16 BYTE)             NOT NULL,
  TRIGGER_TYPE    VARCHAR2(8 BYTE)              NOT NULL,
  START_TIME      NUMBER(13)                    NOT NULL,
  END_TIME        NUMBER(13),
  CALENDAR_NAME   VARCHAR2(80 BYTE),
  MISFIRE_INSTR   NUMBER(2),
  JOB_DATA        BLOB
);


CREATE TABLE QRTZ_TRIGGER_LISTENERS
(
  TRIGGER_NAME      VARCHAR2(80 BYTE)           NOT NULL,
  TRIGGER_GROUP     VARCHAR2(80 BYTE)           NOT NULL,
  TRIGGER_LISTENER  VARCHAR2(80 BYTE)           NOT NULL
);


CREATE INDEX IDX_QRTZ_FT_TRIG_NAME ON QRTZ_FIRED_TRIGGERS
(TRIGGER_NAME);


CREATE INDEX IDX_QRTZ_FT_TRIG_GROUP ON QRTZ_FIRED_TRIGGERS
(TRIGGER_GROUP);


CREATE INDEX IDX_QRTZ_FT_TRIG_NM_GP ON QRTZ_FIRED_TRIGGERS
(TRIGGER_NAME, TRIGGER_GROUP);


CREATE INDEX IDX_QRTZ_FT_TRIG_VOLATILE ON QRTZ_FIRED_TRIGGERS
(IS_VOLATILE);


CREATE INDEX IDX_QRTZ_FT_TRIG_INST_NAME ON QRTZ_FIRED_TRIGGERS
(INSTANCE_NAME);


CREATE INDEX IDX_QRTZ_FT_JOB_NAME ON QRTZ_FIRED_TRIGGERS
(JOB_NAME);


CREATE INDEX IDX_QRTZ_FT_JOB_GROUP ON QRTZ_FIRED_TRIGGERS
(JOB_GROUP);


CREATE INDEX IDX_QRTZ_FT_JOB_STATEFUL ON QRTZ_FIRED_TRIGGERS
(IS_STATEFUL);


CREATE INDEX IDX_QRTZ_FT_JOB_REQ_RECOVERY ON QRTZ_FIRED_TRIGGERS
(REQUESTS_RECOVERY);


CREATE INDEX IDX_QRTZ_J_REQ_RECOVERY ON QRTZ_JOB_DETAILS
(REQUESTS_RECOVERY);


CREATE INDEX IDX_QRTZ_T_VOLATILE ON QRTZ_TRIGGERS
(IS_VOLATILE);


CREATE INDEX IDX_QRTZ_T_NEXT_FIRE_TIME ON QRTZ_TRIGGERS
(NEXT_FIRE_TIME);


CREATE INDEX IDX_QRTZ_T_STATE ON QRTZ_TRIGGERS
(TRIGGER_STATE);


CREATE INDEX IDX_QRTZ_T_NFT_ST ON QRTZ_TRIGGERS
(NEXT_FIRE_TIME, TRIGGER_STATE);


CREATE TABLE QRTZ_BLOB_TRIGGERS
(
  TRIGGER_NAME   VARCHAR2(80 BYTE)              NOT NULL,
  TRIGGER_GROUP  VARCHAR2(80 BYTE)              NOT NULL,
  BLOB_DATA      BLOB
);


CREATE TABLE QRTZ_CRON_TRIGGERS
(
  TRIGGER_NAME     VARCHAR2(80 BYTE)            NOT NULL,
  TRIGGER_GROUP    VARCHAR2(80 BYTE)            NOT NULL,
  CRON_EXPRESSION  VARCHAR2(80 BYTE)            NOT NULL,
  TIME_ZONE_ID     VARCHAR2(80 BYTE)
);


CREATE TABLE QRTZ_SIMPLE_TRIGGERS
(
  TRIGGER_NAME     VARCHAR2(80 BYTE)            NOT NULL,
  TRIGGER_GROUP    VARCHAR2(80 BYTE)            NOT NULL,
  REPEAT_COUNT     NUMBER(7)                    NOT NULL,
  REPEAT_INTERVAL  NUMBER(12)                   NOT NULL,
  TIMES_TRIGGERED  NUMBER(7)                    NOT NULL
);


ALTER TABLE QRTZ_CALENDARS ADD (
  PRIMARY KEY
 (CALENDAR_NAME));


ALTER TABLE QRTZ_FIRED_TRIGGERS ADD (
  PRIMARY KEY
 (ENTRY_ID));


ALTER TABLE QRTZ_JOB_DETAILS ADD (
  PRIMARY KEY
 (JOB_NAME, JOB_GROUP));


ALTER TABLE QRTZ_JOB_LISTENERS ADD (
  PRIMARY KEY
 (JOB_NAME, JOB_GROUP, JOB_LISTENER));


ALTER TABLE QRTZ_LOCKS ADD (
  PRIMARY KEY
 (LOCK_NAME));


ALTER TABLE QRTZ_PAUSED_TRIGGER_GRPS ADD (
  PRIMARY KEY
 (TRIGGER_GROUP));


ALTER TABLE QRTZ_SCHEDULER_STATE ADD (
  PRIMARY KEY
 (INSTANCE_NAME));


ALTER TABLE QRTZ_TRIGGERS ADD (
  PRIMARY KEY
 (TRIGGER_NAME, TRIGGER_GROUP));


ALTER TABLE QRTZ_TRIGGER_LISTENERS ADD (
  PRIMARY KEY
 (TRIGGER_NAME, TRIGGER_GROUP, TRIGGER_LISTENER));


ALTER TABLE QRTZ_BLOB_TRIGGERS ADD (
  PRIMARY KEY
 (TRIGGER_NAME, TRIGGER_GROUP));


ALTER TABLE QRTZ_CRON_TRIGGERS ADD (
  PRIMARY KEY
 (TRIGGER_NAME, TRIGGER_GROUP));


ALTER TABLE QRTZ_SIMPLE_TRIGGERS ADD (
  PRIMARY KEY
 (TRIGGER_NAME, TRIGGER_GROUP));


ALTER TABLE QRTZ_JOB_LISTENERS ADD (
  FOREIGN KEY (JOB_NAME, JOB_GROUP) 
 REFERENCES QRTZ_JOB_DETAILS (JOB_NAME,JOB_GROUP));


ALTER TABLE QRTZ_TRIGGERS ADD (
  FOREIGN KEY (JOB_NAME, JOB_GROUP) 
 REFERENCES QRTZ_JOB_DETAILS (JOB_NAME,JOB_GROUP));


ALTER TABLE QRTZ_TRIGGER_LISTENERS ADD (
  FOREIGN KEY (TRIGGER_NAME, TRIGGER_GROUP) 
 REFERENCES QRTZ_TRIGGERS (TRIGGER_NAME,TRIGGER_GROUP));


ALTER TABLE QRTZ_BLOB_TRIGGERS ADD (
  FOREIGN KEY (TRIGGER_NAME, TRIGGER_GROUP) 
 REFERENCES QRTZ_TRIGGERS (TRIGGER_NAME,TRIGGER_GROUP));


ALTER TABLE QRTZ_CRON_TRIGGERS ADD (
  FOREIGN KEY (TRIGGER_NAME, TRIGGER_GROUP) 
 REFERENCES QRTZ_TRIGGERS (TRIGGER_NAME,TRIGGER_GROUP));


ALTER TABLE QRTZ_SIMPLE_TRIGGERS ADD (
  FOREIGN KEY (TRIGGER_NAME, TRIGGER_GROUP) 
 REFERENCES QRTZ_TRIGGERS (TRIGGER_NAME,TRIGGER_GROUP));

commit;

