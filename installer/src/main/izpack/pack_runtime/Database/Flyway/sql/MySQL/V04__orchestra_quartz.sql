CREATE TABLE QRTZ_CALENDARS
(
  CALENDAR_NAME  VARCHAR(80)              NOT NULL,
  CALENDAR       BLOB                           NOT NULL
)ENGINE= innodb;


CREATE TABLE QRTZ_FIRED_TRIGGERS
(
  ENTRY_ID           VARCHAR(95)          NOT NULL,
  TRIGGER_NAME       VARCHAR(80)          NOT NULL,
  TRIGGER_GROUP      VARCHAR(80)          NOT NULL,
  IS_VOLATILE        VARCHAR(1)           NOT NULL,
  INSTANCE_NAME      VARCHAR(80)          NOT NULL,
  FIRED_TIME         bigint                 NOT NULL,
  PRIORITY           bigint                NOT NULL,
  STATE              VARCHAR(16)          NOT NULL,
  JOB_NAME           VARCHAR(80),
  JOB_GROUP          VARCHAR(80),
  IS_STATEFUL        boolean,
  REQUESTS_RECOVERY  boolean
)ENGINE= innodb;


CREATE TABLE QRTZ_JOB_DETAILS
(
  JOB_NAME           VARCHAR(80)          NOT NULL,
  JOB_GROUP          VARCHAR(80)          NOT NULL,
  DESCRIPTION        VARCHAR(120),
  JOB_CLASS_NAME     VARCHAR(128)         NOT NULL,
  IS_DURABLE         boolean           NOT NULL,
  IS_VOLATILE        boolean           NOT NULL,
  IS_STATEFUL        boolean           NOT NULL,
  REQUESTS_RECOVERY  boolean           NOT NULL,
  JOB_DATA           BLOB
)ENGINE= innodb;


CREATE TABLE QRTZ_JOB_LISTENERS
(
  JOB_NAME      VARCHAR(80)               NOT NULL,
  JOB_GROUP     VARCHAR(80)               NOT NULL,
  JOB_LISTENER  VARCHAR(80)               NOT NULL
)ENGINE= innodb;


CREATE TABLE QRTZ_LOCKS
(
  LOCK_NAME  VARCHAR(40)                  NOT NULL
)ENGINE= innodb;


CREATE TABLE QRTZ_PAUSED_TRIGGER_GRPS
(
  TRIGGER_GROUP  VARCHAR(80)              NOT NULL
)ENGINE= innodb;


CREATE TABLE QRTZ_SCHEDULER_STATE
(
  INSTANCE_NAME      VARCHAR(80)          NOT NULL,
  LAST_CHECKIN_TIME  bigint                 NOT NULL,
  CHECKIN_INTERVAL   bigint                 NOT NULL
)ENGINE= innodb;


CREATE TABLE QRTZ_TRIGGERS
(
  TRIGGER_NAME    VARCHAR(80)             NOT NULL,
  TRIGGER_GROUP   VARCHAR(80)             NOT NULL,
  JOB_NAME        VARCHAR(80)             NOT NULL,
  JOB_GROUP       VARCHAR(80)             NOT NULL,
  IS_VOLATILE     boolean              NOT NULL,
  DESCRIPTION     VARCHAR(120),
  NEXT_FIRE_TIME  bigint,
  PREV_FIRE_TIME  bigint,
  PRIORITY        bigint,
  TRIGGER_STATE   VARCHAR(16)             NOT NULL,
  TRIGGER_TYPE    VARCHAR(8)              NOT NULL,
  START_TIME      bigint                    NOT NULL,
  END_TIME        bigint,
  CALENDAR_NAME   VARCHAR(80),
  MISFIRE_INSTR   bigint,
  JOB_DATA        BLOB
)ENGINE= innodb;


CREATE TABLE QRTZ_TRIGGER_LISTENERS
(
  TRIGGER_NAME      VARCHAR(80)           NOT NULL,
  TRIGGER_GROUP     VARCHAR(80)           NOT NULL,
  TRIGGER_LISTENER  VARCHAR(80)           NOT NULL
)ENGINE= innodb;


CREATE INDEX IDX_QRTZ_FT_TRIG_NAME ON QRTZ_FIRED_TRIGGERS
(TRIGGER_NAME);


CREATE INDEX IDX_QRTZ_FT_TRIG_GROUP ON QRTZ_FIRED_TRIGGERS
(TRIGGER_GROUP);


CREATE INDEX IDX_QRTZ_FT_TRIG_NM_GP ON QRTZ_FIRED_TRIGGERS
(TRIGGER_NAME, TRIGGER_GROUP);


CREATE INDEX IDX_QRTZ_FT_TRIG_VOLATILE ON QRTZ_FIRED_TRIGGERS
(IS_VOLATILE);


CREATE INDEX IDX_QRTZ_FT_TRIG_INST_NAME ON QRTZ_FIRED_TRIGGERS
(INSTANCE_NAME);


CREATE INDEX IDX_QRTZ_FT_JOB_NAME ON QRTZ_FIRED_TRIGGERS
(JOB_NAME);


CREATE INDEX IDX_QRTZ_FT_JOB_GROUP ON QRTZ_FIRED_TRIGGERS
(JOB_GROUP);


CREATE INDEX IDX_QRTZ_FT_JOB_STATEFUL ON QRTZ_FIRED_TRIGGERS
(IS_STATEFUL);


CREATE INDEX IDX_QRTZ_FT_JOB_REQ_RECOVERY ON QRTZ_FIRED_TRIGGERS
(REQUESTS_RECOVERY);


CREATE INDEX IDX_QRTZ_J_REQ_RECOVERY ON QRTZ_JOB_DETAILS
(REQUESTS_RECOVERY);


CREATE INDEX IDX_QRTZ_T_VOLATILE ON QRTZ_TRIGGERS
(IS_VOLATILE);


CREATE INDEX IDX_QRTZ_T_NEXT_FIRE_TIME ON QRTZ_TRIGGERS
(NEXT_FIRE_TIME);


CREATE INDEX IDX_QRTZ_T_STATE ON QRTZ_TRIGGERS
(TRIGGER_STATE);


CREATE INDEX IDX_QRTZ_T_NFT_ST ON QRTZ_TRIGGERS
(NEXT_FIRE_TIME, TRIGGER_STATE);


CREATE TABLE QRTZ_BLOB_TRIGGERS
(
  TRIGGER_NAME   VARCHAR(80)              NOT NULL,
  TRIGGER_GROUP  VARCHAR(80)              NOT NULL,
  BLOB_DATA      BLOB
)ENGINE= innodb;


CREATE TABLE QRTZ_CRON_TRIGGERS
(
  TRIGGER_NAME     VARCHAR(80)            NOT NULL,
  TRIGGER_GROUP    VARCHAR(80)            NOT NULL,
  CRON_EXPRESSION  VARCHAR(80)            NOT NULL,
  TIME_ZONE_ID     VARCHAR(80)
)ENGINE= innodb;


CREATE TABLE QRTZ_SIMPLE_TRIGGERS
(
  TRIGGER_NAME     VARCHAR(80)            NOT NULL,
  TRIGGER_GROUP    VARCHAR(80)            NOT NULL,
  REPEAT_COUNT     bigint                    NOT NULL,
  REPEAT_INTERVAL  bigint                   NOT NULL,
  TIMES_TRIGGERED  bigint                   NOT NULL
)ENGINE= innodb;


ALTER TABLE QRTZ_CALENDARS ADD 
  PRIMARY KEY
 (CALENDAR_NAME);


ALTER TABLE QRTZ_FIRED_TRIGGERS ADD 
  PRIMARY KEY
 (ENTRY_ID);


ALTER TABLE QRTZ_JOB_DETAILS ADD 
  PRIMARY KEY
 (JOB_NAME, JOB_GROUP);


ALTER TABLE QRTZ_JOB_LISTENERS ADD 
  PRIMARY KEY
 (JOB_NAME, JOB_GROUP, JOB_LISTENER);


ALTER TABLE QRTZ_LOCKS ADD 
  PRIMARY KEY
 (LOCK_NAME);


ALTER TABLE QRTZ_PAUSED_TRIGGER_GRPS ADD 
  PRIMARY KEY
 (TRIGGER_GROUP);


ALTER TABLE QRTZ_SCHEDULER_STATE ADD 
  PRIMARY KEY
 (INSTANCE_NAME);


ALTER TABLE QRTZ_TRIGGERS ADD 
  PRIMARY KEY
 (TRIGGER_NAME, TRIGGER_GROUP);


ALTER TABLE QRTZ_TRIGGER_LISTENERS ADD 
  PRIMARY KEY
 (TRIGGER_NAME, TRIGGER_GROUP, TRIGGER_LISTENER);


ALTER TABLE QRTZ_BLOB_TRIGGERS ADD 
  PRIMARY KEY
 (TRIGGER_NAME, TRIGGER_GROUP);


ALTER TABLE QRTZ_CRON_TRIGGERS ADD 
  PRIMARY KEY
 (TRIGGER_NAME, TRIGGER_GROUP);


ALTER TABLE QRTZ_SIMPLE_TRIGGERS ADD 
  PRIMARY KEY
 (TRIGGER_NAME, TRIGGER_GROUP);


ALTER TABLE QRTZ_JOB_LISTENERS ADD 
  FOREIGN KEY (JOB_NAME, JOB_GROUP) 
 REFERENCES QRTZ_JOB_DETAILS (JOB_NAME,JOB_GROUP);


ALTER TABLE QRTZ_TRIGGERS ADD 
  FOREIGN KEY (JOB_NAME, JOB_GROUP) 
 REFERENCES QRTZ_JOB_DETAILS (JOB_NAME,JOB_GROUP);


ALTER TABLE QRTZ_TRIGGER_LISTENERS ADD 
  FOREIGN KEY (TRIGGER_NAME, TRIGGER_GROUP) 
 REFERENCES QRTZ_TRIGGERS (TRIGGER_NAME,TRIGGER_GROUP);


ALTER TABLE QRTZ_BLOB_TRIGGERS ADD 
  FOREIGN KEY (TRIGGER_NAME, TRIGGER_GROUP) 
 REFERENCES QRTZ_TRIGGERS (TRIGGER_NAME,TRIGGER_GROUP);


ALTER TABLE QRTZ_CRON_TRIGGERS ADD 
  FOREIGN KEY (TRIGGER_NAME, TRIGGER_GROUP) 
 REFERENCES QRTZ_TRIGGERS (TRIGGER_NAME,TRIGGER_GROUP);


ALTER TABLE QRTZ_SIMPLE_TRIGGERS ADD 
  FOREIGN KEY (TRIGGER_NAME, TRIGGER_GROUP) 
 REFERENCES QRTZ_TRIGGERS (TRIGGER_NAME,TRIGGER_GROUP);

commit;

