
CREATE TABLE ORC_EVENT_ERROR_CONTEXT
(
  ERC_ID         NUMBER(19)                     NOT NULL,
  ERC_EXC_TYPE   VARCHAR2(512 CHAR),
  ERC_ACTION     VARCHAR2(512 CHAR),
  ERC_MESSAGE    VARCHAR2(512 CHAR),
  ERC_CLASSNAME  VARCHAR2(512 CHAR),
  ERC_METHOD     VARCHAR2(512 CHAR),
  ERC_FILE       VARCHAR2(512 CHAR),
  ERC_LINE       NUMBER(10),
  ERC_STACK      VARCHAR2(1536 CHAR)
);


CREATE TABLE ORC_EVENT_SCENARIO_CONTEXT
(
  ECO_ID            NUMBER(19)                  NOT NULL,
  ECO_DERIVED_TYPE  VARCHAR2(512 CHAR)          NOT NULL,
  ECO_REFERENCE     VARCHAR2(512 CHAR),
  ECO_NAME          VARCHAR2(512 CHAR),
  ECO_TYPE          VARCHAR2(512 CHAR),
  ECO_SUBTYPE       VARCHAR2(512 CHAR),
  ECO_ACT_NAME      VARCHAR2(512 CHAR),
  ECO_ACT_ID        VARCHAR2(512 CHAR),
  ECO_ACT_TYPE      VARCHAR2(512 CHAR),
  ECO_RETRY         NUMBER(10),
  ECO_MAX_RETRIES   NUMBER(10)
);


ALTER TABLE ORC_EVENT_ERROR_CONTEXT ADD (
  CONSTRAINT PK_ORC_EVENT_ERROR_CONTEXT PRIMARY KEY (ERC_ID));


ALTER TABLE ORC_EVENT_SCENARIO_CONTEXT ADD (
  CONSTRAINT PK_ORC_EVENT_SCENARIO_CONTEXT PRIMARY KEY (ECO_ID));


ALTER TABLE ORC_EVENT_SYSTEM add
(
  EVT_SCEN_REF        VARCHAR2(255),
  EVT_SCEN_NAME       VARCHAR2(255),
  EVT_SCEN_DESC       VARCHAR2(255),
  EVT_SCEN_PROCESSOR  NUMBER(19),
  EVT_SCEN_INITIATOR  NUMBER(19),
  EVT_ERROR_CONTEXT   NUMBER(19)
);

alter table ORC_EVENT_SYSTEM modify (
  EVT_DESCRIPTION VARCHAR2(512)
);


ALTER TABLE ORC_PROCESS_STATE ADD (
  PRS_BUSINESS_KEY  VARCHAR2(256 BYTE),
  PRS_BUSINESS_KEY_NAME  VARCHAR2(256 BYTE),
  PRS_SCENARIO_ID   VARCHAR2(256 BYTE),
  PRS_ROOT_TOKEN    VARCHAR2(256 BYTE)
);

ALTER TABLE ORC_PROCESS_STATE DROP PRIMARY KEY;

ALTER TABLE ORC_PROCESS_STATE ADD (
  CONSTRAINT PK_ORC_PROCESS_STATE PRIMARY KEY (PRS_PROCESS_ID));

create table ORC_TIMING_DATA (
	OTD_IDENTIFIER varchar2(255 char) not null, 
	OTD_OWNER_TYPE varchar2(255 char), 
	OTD_OWNER_NAME varchar2(255 char), 
	OTD_DETAIL_TYPE varchar2(255 char), 
	OTD_DETAIL_NAME varchar2(255 char), 
	OTD_TIMING_TEXT varchar2(255 char), 
	OTD_PAUSED number(1,0), 
	OTD_TIMING BLOB
);


ALTER TABLE ORC_TIMING_DATA ADD (
  CONSTRAINT PK_ORC_TIMING_DATA 
  PRIMARY KEY (OTD_IDENTIFIER));

CREATE TABLE ORC_MONITOR_SETTINGS
(
  ORC_USERID            VARCHAR2(255 char)      NOT NULL,
  ORC_STAGE_LABEL_TEXT  VARCHAR2(255 char),
  ORC_STAGE_LABEL_COLOR VARCHAR2(255 char),
  ORC_LANGUAGE          VARCHAR2(255 char),
  ORC_LOGOFF_PERIODE    INTEGER
);

CREATE TABLE ORC_MONITOR_TABLESETTINGS
(
	ORC_PARENT_USERID VARCHAR2(255 char) NOT NULL,
	ORC_TABLECLASS VARCHAR2(255 char) NOT NULL,
	ORC_AUTOREFRESH INTEGER,
	ORC_MAXELEMENTS INTEGER,
	ORC_REFRESHINTERVAL INTEGER,
	ORC_DEFAULT_SORT_COLUMN INTEGER,
	ORC_DEFAULT_SORT_ASCENDING INTEGER,
	ORC_COLUMN_PATTERN VARCHAR2(255 char)
);

insert into ORC_SEC_GROUP_V2 (OSG_SCENARIO, OSG_IDENTIFIER, OSG_DESC) values ('RUNTIME', 'RUNTIME:Timer', NULL);

insert into ORC_SEC_ROLE_V2 (OSR_SCENARIO, OSR_IDENTIFIER, OSR_DESC) values ('RUNTIME', 'RUNTIME:TimerView', NULL);
insert into ORC_SEC_ROLE_V2 (OSR_SCENARIO, OSR_IDENTIFIER, OSR_DESC) values ('RUNTIME', 'RUNTIME:TimerUpdate', NULL);
insert into ORC_SEC_ROLE_V2 (OSR_SCENARIO, OSR_IDENTIFIER, OSR_DESC) values ('RUNTIME', 'RUNTIME:TimerPause', NULL);

insert into ORC_SEC_GROUP_ROLES_V2 (OGR_GROUP_ID, OGR_ROLE_ID) values ('RUNTIME:Timer', 'TimerView');
insert into ORC_SEC_GROUP_ROLES_V2 (OGR_GROUP_ID, OGR_ROLE_ID) values ('RUNTIME:Timer', 'TimerUpdate');
insert into ORC_SEC_GROUP_ROLES_V2 (OGR_GROUP_ID, OGR_ROLE_ID) values('RUNTIME:Timer', 'TimerPause');







insert into ORC_CLUSTER_LOCK(ORC_LOCK_NAME, ORC_LOCK_STATE, ORC_LOCK_OWNER, ORC_LOCK_SCENARIO) Values ('TIMER', NULL, NULL, 'GLOBAL');




insert into ORC_SEC_USER_ROLES_V2(OUR_USER_ID, OUR_ROLE_ID) values ('RUNTIME:admin', 'TimerView');
insert into ORC_SEC_USER_ROLES_V2(OUR_USER_ID, OUR_ROLE_ID) values ('RUNTIME:admin', 'TimerUpdate');
insert into ORC_SEC_USER_ROLES_V2(OUR_USER_ID, OUR_ROLE_ID) values ('RUNTIME:admin', 'TimerPause');

commit;
