%PACKAGE%

import java.util.Map;
import java.util.Set;

import emds.epi.decl.exceptions.EpiBaseException;
import emds.epi.impl.adapter.stream.segpars.MessageTypeResolver;

/**
 * This call defines a lookup-handler that will be used by all parsers
 * that have to find a message type dynamically by pre-parsed message attributes
 * Depending on the given attributes a message type name has to be generated. This name
 * will be used to find an appropriate message type in the repository
 * 
 */
 
 
%CLASSDESC%
public class %CLASSNAME% implements MessageTypeResolver {

	public %CLASSNAME%() {
	}
 
	/**
	 * Generate a message type name that should be used for syntax checking of messages. 
     *
	 * @param scenarioIdentifier Reference to owning process scenario
	 * @param availableMessageTypes A set of currently available message types. The returned is only valid if it is contained in this set
	 * @param messageProperties  A pair of attributes key/values that have been pre-parsed and should be used for generating the message type
	 * 
	 * @return A computed message type name
	 */
	 	
	public String resolveMessageTypeName( String scenarioIdentifier, Set<String> availableMessageTypes, Map<String, String> messageProperties ) throws EpiBaseException {
		return messageProperties.get( messageProperties.get( "MSH.1" ) + "_" + messageProperties.get( "MSH.2" )  ) ;
	}	
}
