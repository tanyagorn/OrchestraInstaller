<?xml version="1.0" encoding="UTF-8"?><configuration>

    <service class="emds.epi.impl.baseservice.OrchestraBaseService" name="MasterdataService">

		  
		<parameters>

		  	<group name="Support">
		  		<parameter name="SMTP_HOST_NAME" value="zimbra.emds-ag.de"/> 
		  		<parameter name="SMTP_AUTH_USER" value="fhe@emds-ag.de"/> 
		  		<parameter name="SMTP_AUTH_PWD" value=""/> 
		  		<parameter name="SUPPORT_EMAIL" value="bha@emds-ag.de"/> 
		  	</group>
	
		  	<group name="EmailNotification">
		  		<parameter name="SMTP_HOST_NAME" value="zimbra.emds-ag.de"/> 
		  		<parameter name="SMTP_AUTH_USER" value="fhe@emds-ag.de"/> 
		  		<parameter name="SMTP_AUTH_PWD" value=""/> 
		  		<parameter name="SUPPORT_EMAIL" value="bha@emds-ag.de"/> 
		  	</group>

		  	<group name="Startup">
		  	
		  		<parameter name="ASYNCH" value="true"/> 
		  	</group>	
	
			  	<group name="SSLSettings">
			  		<parameter name="KEYSTORE" value="config/orchestra.keystore"/> 
			  		<parameter name="KEYSTORE.PASSWORD" value="0008464e5a525a4c4e550006726e716264630000001065d6edb79621528455690d4dd418c355"/> 
			  		<parameter name="KEYSTORE.KEYPASSOWRD" value="0008464e5a525a4c4e550006726e716264630000001065d6edb79621528455690d4dd418c355"/> 
			  	</group>	

		  	<group name="SSHSecurity">
		  		<parameter name="KEYSTORE" value="config/orchestra.ssh.key"/> 
		  		<parameter name="KEYSTORE.PASSWORD" value="0008464e5a525a4c4e550006726e716264630000001065d6edb79621528455690d4dd418c355"/> 
		  		<parameter name="SSHUSER" value="ORCHESTRA"/> 
		  	</group>

		</parameters>	  	
  	
		<parameter_reference path="{property.orchestra.environment}">
			<parameter_reference path="{system.ORCHESTRA_ENVIRONMENT}">
				<parameter_reference reference="de/soffico/orchestra/test/config/environment_settings.xml"/>	  
			</parameter_reference>	  
		</parameter_reference>	  
		
		<parameter_reference reference="config/database_settings.xml"/>	  
		<parameter_reference reference="config/base_node_settings.xml"/>	  
	
    </service>
    
    
    

    <service class="emds.epi.impl.runtimedatabase.RuntimeDatabaseServiceImpl" name="DatabaseService">
 
 		<pool class="emds.epi.impl.runtimedatabase.DatabasePoolImpl" name="default">
		 	<url>{database.runtime.url}</url>
			<driver>{database.runtime.driver}</driver>
			<user>{database.runtime.user}</user>
			<pwd>{database.runtime.pwd}</pwd>
			<limit>{databasepool.limit.default}</limit>
			
			<init.sql.1>{database.init.sql.1}</init.sql.1>
			<init.sql>{database.init.sql}</init.sql>
			<logging.enabled>{logging.runtime.sql.logging}</logging.enabled>
			<strategy>{database.runtime.strategy}</strategy>
 		</pool>

 		<pool class="emds.epi.impl.runtimedatabase.DatabasePoolImpl" name="monitor">
		 	<url>{database.runtime.url}</url>
			<driver>{database.runtime.driver}</driver>
			<user>{database.runtime.user}</user>
			<pwd>{database.runtime.pwd}</pwd>
			<limit>{databasepool.limit.monitor}</limit>
			
			<init.sql.1>{database.init.sql.1}</init.sql.1>
			<init.sql>{database.init.sql}</init.sql>
			<logging.enabled>{logging.runtime.sql.logging}</logging.enabled>
			<strategy>{database.runtime.strategy}</strategy>
 		</pool>

 		<pool class="emds.epi.impl.runtimedatabase.DatabasePoolImpl" name="event">
		 	<url>{database.runtime.url}</url>
			<driver>{database.runtime.driver}</driver>
			<user>{database.runtime.user}</user>
			<pwd>{database.runtime.pwd}</pwd>
			<limit>{databasepool.limit.event}</limit>
			
			<init.sql.1>{database.init.sql.1}</init.sql.1>
			<init.sql>{database.init.sql}</init.sql>
			<logging.enabled>{logging.runtime.sql.logging}</logging.enabled>
			<strategy>{database.runtime.strategy}</strategy>
 		</pool>

 		<pool class="emds.epi.impl.runtimedatabase.DatabasePoolImpl" name="identity">
		 	<url>{database.runtime.url}</url>
			<driver>{database.runtime.driver}</driver>
			<user>{database.runtime.user}</user>
			<pwd>{database.runtime.pwd}</pwd>
			<limit>{databasepool.limit.identity}</limit>
			
			<init.sql.1>{database.init.sql.1}</init.sql.1>
			<init.sql>{database.init.sql}</init.sql>
			<logging.enabled>{logging.runtime.sql.logging}</logging.enabled>
			<strategy>{database.runtime.strategy}</strategy>
 		</pool>
 		
 		<pool class="emds.epi.impl.runtimedatabase.DatabasePoolImpl" enabled="{longtimearchive.mode#active}" name="archive">
		 	<url>{database.archive.url}</url>
			<driver>{database.archive.driver}</driver>
			<user>{database.archive.user}</user>
			<pwd>{database.archive.pwd}</pwd>
			<limit>{databasepool.limit.archive}</limit>
			
			<init.sql.1>{database.archive.init.sql.1}</init.sql.1>
			<init.sql>{database.archive.init.sql}</init.sql>
			<logging.enabled>{logging.runtime.sql.logging}</logging.enabled>
 		</pool>
 		
     </service>

    



     <service class="emds.epi.impl.security.StandardSecurityImpl" name="SecurityService">
              
             <persistence class="emds.epi.impl.security.persistence.SecurityPersistenceImpl"/>   
               
             <authentication class="emds.epi.impl.security.PasswordAuthenticator" name="Password"/>
             
             <authentication class="emds.epi.impl.security.CertificateAuthenticator" name="Client-Certificate"/>
             				 
             <authentication class="emds.epi.impl.security.SSHCertificateAuthenticator" name="SSH-Certificate"/>
             				 
             <authentication class="emds.epi.graph.runtime.SimpleKeyPairAuthenticatorHandler" name="Key-Pair (PKCS#12)"/>
			             			                          
    </service>     
    



    
    
    <service class="emds.epi.impl.context.RuntimeContextServiceImpl" name="RuntimeContext">
             
       <variable class="emds.epi.impl.context.HibernateSession" name="HIBERNATE"/>
       <variable class="emds.epi.impl.context.DatabaseContextVariable" name="DATABASECONTEXT"/>
       <variable class="emds.epi.impl.locking.LockServiceContext" name="LOCKINGREQUISITION"/>
  	   <variable class="emds.epi.impl.timer.TimerContextFactory" name="TIMERCONTEXT"/>
       <variable class="emds.epi.impl.queue.QueueContextVariableHandler" name="QUEUECONTEXT"/>
	   <variable class="emds.epi.impl.messagestore.MessageResourceManager" name="MESSAGECLEANUP"/>
    
    </service>
  
   
    
    <service class="de.soffico.orchestra.test.test.PersitenceServiceTest" name="PersistenceService">
             
       <persister class="de.soffico.orchestra.test.test.PersistenceProviderTest" elementClass="emds.epi.decl.modell.process.ProcessModell" keep="false" name="ProcessModell" prefix="PMO_" table="ORC_PROCESS_MODELLS"/>
       <persister class="de.soffico.orchestra.test.test.PersistenceProviderTest" keep="false" name="Channel" prefix="CHA_" table="ORC_CHANNEL"/>
       <persister class="de.soffico.orchestra.test.test.PersistenceProviderTest" keep="false" name="ContentMapping" prefix="CMA_" table="ORC_CONTENT_MAPPING"/>
       <persister class="de.soffico.orchestra.test.test.PersistenceProviderTest" keep="false" name="MessageMapping" prefix="MMA_" table="ORC_MESSAGE_MAPPING"/>
       <persister class="de.soffico.orchestra.test.test.PersistenceProviderTest" keep="false" name="ContentTypeDefinition" prefix="CTY_" table="ORC_CONTENT_TYPE"/>
       <persister class="de.soffico.orchestra.test.test.PersistenceProviderTest" keep="false" name="MessageType" prefix="MTY_" table="ORC_MESSAGE_TYPE"/>
       <persister class="de.soffico.orchestra.test.test.PersistenceProviderTest" keep="false" name="XMLSchema" prefix="XSC_" table="ORC_XML_SCHEMA"/>
       <persister alias="MessageInterface" class="de.soffico.orchestra.test.test.PersistenceProviderTest" keep="false" name="ServiceInterface" prefix="MIN_" table="ORC_MESSAGE_INTERFACE"/>       
       <persister class="de.soffico.orchestra.test.test.PersistenceProviderTest" keep="true" name="EnvironmentEntry" prefix="LAN_" table="ORC_LANDSCAPE"/>        
       <persister class="de.soffico.orchestra.test.test.PersistenceProviderTest" keep="false" name="JarFile" prefix="ARC_" table="ORC_ARCHIVE"/>
  	   <persister class="de.soffico.orchestra.test.test.PersistenceProviderTest" keep="false" name="ServiceDeclaration" prefix="SDC_" table="ORC_SVC_DECLARATION"/>
	   <persister class="de.soffico.orchestra.test.test.PersistenceProviderTest" keep="false" name="ServiceProvider" prefix="SPR_" table="ORC_SVC_PROVIDER"/>
	   <persister class="de.soffico.orchestra.test.test.PersistenceProviderTest" keep="false" name="PartnerConfiguration" prefix="PRT_" table="ORC_PRT_PARTNERCONFIG"/>
       <persister class="de.soffico.orchestra.test.test.PersistenceProviderTest" keep="false" name="ParserDescription" prefix="PRS_" table="ORC_PRS_DESCRIPTION"/>
       <persister class="de.soffico.orchestra.test.test.PersistenceProviderTest" keep="false" name="LookupTable" prefix="PRS_" table="ORC_PRS_DESCRIPTION"/>
       <persister class="de.soffico.orchestra.test.test.PersistenceProviderTest" keep="false" name="JavaFile" prefix="PRS_" table="ORC_PRS_DESCRIPTION"/>
             
    </service>  
  
    
    
    <service class="emds.epi.impl.serverstate.ServerStateManagerImpl" name="ServerStateManager">

      <forceSingletonListener>false</forceSingletonListener>
      
      <group name="DEFAULT">

	      <action name="CONTAINER.STARTUP">
	      	<listener service="ProcessMonitoring"/>
	        <listener service="ServletEngine"/>
	      </action>

	      <action name="CONTAINER.SHUTDOWN">
	        <listener service="ServletEngine"/>
	      	<listener service="ProcessMonitoring"/>
	      </action>

	      <action name="STARTUP">
	      	<listener service="ProcessMonitoring"/>
			<listener service="TransactionFactory"/>
	      	<listener service="ClusterService"/>
	        <listener service="MappingService"/>
	        <listener service="LandscapeDirectory"/>
	        <listener class="emds.epi.impl.queue.QueueServerActionListener"/>  
	        <listener service="ProcessEngine"/> 
	        <listener service="CommunicationEngine"/>
	        <listener class="emds.epi.impl.timer.TimerServerStateListener"/>
	        <listener service="ServletEngine"/>
			<listener service="EnterpriseServiceRegistry"/>
			<listener service="CellCommunicationService"/>		   
			<listener service="PartnerService"/>		     
			<listener service="EnterpriseServiceRegistryAdmin"/>		     
			<listener service="KpiService"/>
	      </action>
	
	      <action name="SHUTDOWN">
	        <listener class="emds.epi.impl.queue.QueueServerActionListener"/>  
			<listener service="CellCommunicationService"/>
			<listener service="EnterpriseServiceRegistry"/>
			<listener service="PartnerService"/>		     
	        <listener service="ClusterService"/>
	        <listener service="CommunicationEngine"/>
	        <listener service="ServletEngine"/>
	        <listener class="emds.epi.impl.timer.TimerServerStateListener"/>
	        <listener service="MappingService"/>
	        <listener service="LandscapeDirectory"/>
	        <listener service="ProcessEngine"/>
			<listener service="TransactionFactory"/>
			<listener service="KpiService"/>
	        <listener service="MessageStore"/>
	      </action>
	
	      <action name="INSTALL">
			<listener class="emds.epi.impl.baseservice.ScenarioLoggerInit"/>				
	        <listener service="ArchiveService"/>
	        <listener service="MessageStore"/>
	        <listener service="MappingService"/>
	        <listener service="LandscapeDirectory"/>
	        <listener service="CommunicationEngine"/>
	        <listener service="ProcessEngine"/> 
			<listener service="EnterpriseServiceRegistry"/>
			<listener service="PartnerService"/>								
	      </action>
	
	      <action name="UNINSTALL">
			<listener service="EnterpriseServiceRegistry"/>
	        <listener service="CommunicationEngine"/>
	        <listener service="ProcessEngine"/> 
	        <listener service="LandscapeDirectory"/>
	        <listener service="MappingService"/>
	        <listener service="MessageStore"/>
	        <listener service="ArchiveService"/>
			<listener service="PartnerService"/>			
			<listener class="emds.epi.impl.baseservice.ScenarioLoggerInit"/>				
	      </action>
	
	      <action name="UNDEPLOY">
	        <listener class="emds.epi.impl.queue.QueueServerActionListener"/>  
	        <listener service="CommunicationEngine"/>
	        <listener service="ProcessEngine"/> 
	        <listener service="LandscapeDirectory"/>
	        <listener service="MappingService"/>
	        <listener service="ArchiveService"/>
	        <listener service="MessageStore"/>
	        <listener service="ProcessMonitoring"/>
	        <listener service="PersistenceService"/>
	        <listener service="SecurityService"/>   
	        <listener service="LockingService"/>    
	        <listener service="BusinessTransaction"/>
			<listener service="EnterpriseServiceRegistry"/>
			<listener service="PartnerService"/>
			<listener service="EnterpriseServiceRegistryAdmin"/>		  
			<listener service="KpiService"/>
			<listener service="DocumentationService"/>  
	      </action>  
	 
	      <action name="DEPLOY,REDEPLOY">
	        <listener class="emds.epi.impl.queue.QueueServerActionListener"/>  
	        <listener service="PersistenceService"/>
	        <listener service="CommunicationEngine"/>
	        <listener service="ProcessEngine"/> 
	        <listener service="LandscapeDirectory"/>
	        <listener service="ArchiveService"/>
	        <listener service="MappingService"/>
	        <listener service="MessageStore"/>
	        <listener service="ProcessMonitoring"/>
	        <listener service="SecurityService"/>
	        <listener service="LockingService"/>  
			<listener service="BusinessTransaction"/>
			<listener service="EnterpriseServiceRegistry"/>
			<listener service="PartnerService"/>
			<listener service="EnterpriseServiceRegistryAdmin"/>		   
			<listener service="DocumentationService"/>  
	      </action>        
	    
	      <action name="SYNCHRONIZE">
	        <listener service="PersistenceService"/>
	        <listener service="EnterpriseServiceRegistry"/>
	        <listener class="emds.epi.impl.queue.QueueServerActionListener"/>  
	      </action>        

	      <action name="ACTIVATE_PROCESS_SCENARIO">
		    <listener service="ProcessMonitoring"/>
	        <listener class="emds.epi.impl.queue.QueueServerActionListener"/>  
	        <listener service="ProcessEngine"/>
	        <listener service="CommunicationEngine"/>
			<listener service="EnterpriseServiceRegistry"/>
	      </action>        
	
	      <action name="DEACTIVATE_PROCESS_SCENARIO">
	        <listener class="emds.epi.impl.cellcom.CellSuspendListener"/>
	        <listener service="EnterpriseServiceRegistry"/>
	        <listener class="emds.epi.impl.queue.QueueServerActionListener"/>  
	      	<listener service="CommunicationEngine"/>
	      	<listener service="ProcessEngine"/>
	      </action>   
	           
	      <action name="SUSPEND">
	      	<listener service="ProcessEngine"/>
	      </action>   	           

	      <action name="RESUME">
	      	<listener service="ProcessEngine"/>
	      </action>   	           
	           
	      <action name="CLUSTERSWITCH">
	        <listener service="LockingService"/>    
	      	<listener service="ProcessEngine"/>
	        <listener service="ProcessMonitoring"/>
	        <listener class="emds.epi.impl.queue.QueueServerActionListener"/>  
	        <listener service="ClusterService"/>
	      </action>   	           
	           
	           
		</group>      
		
    </service>

    
    
    <service class="emds.epi.impl.timer.TimerFactoryImpl" name="TimerService">

		<error_behaviour retries="50" sleeptime="10000"/>

        <timer class="emds.epi.impl.timer.QuartzVolatileTimer" type="volatile"/>
        
        <timer class="emds.epi.impl.timer.QuartzPersistentTimer" type="persistent">

			<error_behaviour retries="50" sleeptime="10000"/>
      
			

         	<parameter name="org.quartz.jobStore.driverDelegateClass" value="{database.timer.persistent.delegate}"/>
        	<parameter enabled="{database.timer.persistent.lock.enabled}" name="org.quartz.jobStore.lockHandler.class" value="{database.timer.persistent.lockhandler}"/>
        	<parameter name="org.quartz.threadPool.threadCount" value="2"/>

			

        	<parameter enabled="{runtime.mode#CLUSTERNODE}" name="org.quartz.scheduler.instanceId" value="{runtime.nodeid}"/>
        	<parameter enabled="{runtime.mode#CLUSTERNODE}" name="org.quartz.jobStore.isClustered" value="true"/>
        	<parameter enabled="{runtime.mode#CLUSTERNODE}" name="org.quartz.jobStore.clusterCheckinInterval" value="60000"/>
         </timer>

		<persistence class="emds.epi.impl.timer.DatabaseTimerPersistence"/>

    </service>


    
    
    <service class="emds.epi.impl.messagestore.MessageStoreImpl" name="MessageStore">
     
     	<MessageLock class="{database.messagestore.messagelock}"/>
		<MessageListFactory class="emds.epi.impl.messagestore.PermanentMessageListFactory"/>
     
        <MessageFactory applicable="always" class="emds.epi.impl.messagestore.persistent.PersistentMessageFactory" namespace="ptree" supportsMassData="true">
            
            <persistence class="emds.epi.impl.messagestore.persistent.DatabaseContentProvider"/>

           	<contentWriter class="emds.epi.impl.messagestore.persistent.pagev2.PagedContentWriter">
            	<parameter name="MODE" value="{messagestore.page.type}"/> 
				<parameter enabled="{messagestore.page.type#DATABASE}" name="PAGEMANAGER" value="emds.epi.impl.messagestore.persistent.pagev2.DatabasePageManager"/> 
				<parameter enabled="{messagestore.page.type#FILE}" name="PAGEMANAGER" value="emds.epi.impl.messagestore.persistent.pagev2.FilePageManager"/> 
 				<parameter name="PAGEDIRECTORY" value="{messagestore.page.path}"/> 
           	</contentWriter>

           	<contentReader class="emds.epi.impl.messagestore.persistent.pagev2.PagedContentReader">
            	<parameter name="MODE" value="{messagestore.page.type}"/> 
				<parameter enabled="{messagestore.page.type#DATABASE}" name="PAGEMANAGER" value="emds.epi.impl.messagestore.persistent.pagev2.DatabasePageManager"/> 
				<parameter enabled="{messagestore.page.type#FILE}" name="PAGEMANAGER" value="emds.epi.impl.messagestore.persistent.pagev2.FilePageManager"/> 
 				<parameter name="PAGEDIRECTORY" value="{messagestore.page.path}"/> 
           	</contentReader>
            
  			<message_builder class="emds.epi.impl.messagestore.persistent.pagev2.DBPagedStoreMessageConstructor"/>
			<message_builder class="emds.epi.impl.messagestore.persistent.pagev2.PagedMessageDOMBuilder"/>
			<message_builder class="emds.epi.impl.messagestore.persistent.pagev2.PagedMessageStreamBuilder"/>
  			<message_builder class="emds.epi.impl.messagestore.persistent.pagev2.PagedRemoteMessageBuilder"/>
            <message_builder class="emds.epi.impl.messagestore.binary.persistent.BinaryMessageBuilderImpl"/>
            <message_builder class="emds.epi.impl.messagestore.persistent.pagev2.PagedBuilder"/>
            
        </MessageFactory>
        
        <MessageFactory class="emds.epi.impl.messagestore.memory.MemoryMessageFactory" enabled="{runtime.mode#STANDALONE}" namespace="memory">
           
           	<cache size="500"/>
           
            <message_builder class="emds.epi.impl.messagestore.memory.XMLBuilderInMemory"/>
            <message_builder class="emds.epi.impl.messagestore.memory.XMLMemoryMessageConstructor"/>
            <message_builder class="emds.epi.impl.messagestore.external.memory.DatabaseMessageBuilder"/>
            <message_builder class="emds.epi.impl.messagestore.binary.memory.BinaryMessageBuilderImpl"/>
			<message_builder class="emds.epi.impl.messagestore.memory.MemoryRemoteMessageBuilder"/>

        </MessageFactory>

        <MessageFactory class="emds.epi.impl.messagestore.memory.MemoryMessageFactory" enabled="{runtime.mode#CELL}" namespace="memory">
           
            <message_builder class="emds.epi.impl.messagestore.memory.XMLBuilderInMemory"/>
            <message_builder class="emds.epi.impl.messagestore.memory.XMLMemoryMessageConstructor"/>
            <message_builder class="emds.epi.impl.messagestore.external.memory.DatabaseMessageBuilder"/>
            <message_builder class="emds.epi.impl.messagestore.binary.memory.BinaryMessageBuilderImpl"/>
			<message_builder class="emds.epi.impl.messagestore.memory.MemoryRemoteMessageBuilder"/>

        </MessageFactory>
                
        <MessageFactory applicable="always" class="emds.epi.impl.messagestore.persistent.PersistentMessageFactory" namespace="persistent" supportsMassData="false">
            
            <persistence class="emds.epi.impl.messagestore.persistent.DatabaseContentProvider"/>

           	<contentReader class="{database.messagestore.contentreader}">
		  		<parameter name="TEMPPATH" value="{database.runtime.blob.temp}"/> 
		  		<parameter name="MEMSIZE" value="10"/> 
 		  		<parameter name="COMPRESS" value="true"/> 
        	</contentReader>

           	<contentWriter class="{database.messagestore.contentwriter}">
		  		<parameter name="TEMPPATH" value="{database.runtime.blob.temp}"/> 
		  		<parameter name="MEMSIZE" value="10"/> 
 		  		<parameter name="COMPRESS" value="true"/> 
           	</contentWriter>
            	            	            
            <message_builder class="emds.epi.impl.messagestore.persistent.xml.XMLDatabaseMessageConstructor"/>
            <message_builder class="emds.epi.impl.messagestore.persistent.xml.XMLDatabaseSaxBuilder"/>
            <message_builder class="emds.epi.impl.messagestore.persistent.xml.XMLDatabaseDecoratedStreamBuilder"/>
            <message_builder class="emds.epi.impl.messagestore.persistent.xml.XMLDOMStreamBuilder"/>
            <message_builder class="emds.epi.impl.messagestore.external.persistent.DatabaseMessageBuilder"/>
            <message_builder class="emds.epi.impl.messagestore.binary.persistent.BinaryMessageBuilderImpl"/>
			<message_builder class="emds.epi.impl.messagestore.persistent.PersistentRemoteMessageBuilder"/>
            <message_builder class="emds.epi.impl.messagestore.persistent.PersistentXMLImportBuilder"/>
           
        </MessageFactory>
                
        <MessageFactory class="emds.epi.impl.processengine.archive.ArchiveMessageFactory" namespace="archive" runtimeNamespace="persistent" supportsMassData="false">
            
            <persistence archivpath="{longtimearchive.file.path}" class="emds.epi.impl.processengine.archive.ArchiveContentProvider"/>
            
         
          	<contentReader class="emds.epi.impl.processengine.archive.ArchiveContentReader">
	      	</contentReader>

           	<contentWriter class="emds.epi.impl.processengine.archive.ArchiveContentWriter">
	       	</contentWriter>
                                    
            <message_builder class="emds.epi.impl.messagestore.external.persistent.DatabaseMessageBuilder"/>
            <message_builder class="emds.epi.impl.messagestore.persistent.PersistentXMLImportBuilder"/>
            <message_builder class="emds.epi.impl.messagestore.binary.persistent.BinaryMessageBuilderImpl"/>                
        </MessageFactory>          
        
        <MessageFactory class="emds.epi.impl.processengine.archive.ArchiveMessageFactory" namespace="archiveptree" runtimeNamespace="ptree" supportsMassData="true">
            
            <persistence archivpath="{longtimearchive.file.path}" class="emds.epi.impl.processengine.archive.ArchiveContentProvider"/>
            
            <persistence archivpath="{longtimearchive.file.path}" class="emds.epi.impl.processengine.archive.ArchiveContentProvider"/>
            
           	<contentWriter class="emds.epi.impl.processengine.archive.ArchiveContentWriterPage">
				<parameter name="PAGEMANAGER" value="emds.epi.impl.processengine.archive.ArchivePageManager"/> 
				<parameter name="THREADED" value="false"/>
          	</contentWriter>

           	<contentReader class="emds.epi.impl.messagestore.persistent.pagev2.PagedContentReader">
				<parameter name="PAGEMANAGER" value="emds.epi.impl.processengine.archive.ArchivePageManager"/> 
           	</contentReader>
                         
            <message_builder class="emds.epi.impl.messagestore.persistent.pagev2.PagedBuilder"/>
                        
        </MessageFactory>              
          
    </service>

    

    

     <service class="emds.epi.impl.queue.QueueFactoryImpl" name="QueueEngine">

		<commitDecision class="emds.epi.impl.queue.QueueCommitDecisionFactory">

		     	
	       	 
			<error_behaviour retries="infinite" sleeptime="10000"/>

		</commitDecision>

		<persistence class="emds.epi.impl.queue.persitence.QueueBaseStandadPersistence"/>
	
		
			    			
	    <priority type="default" value="20"/>

		

		<cache class="emds.util.FifoCache" itemsize="200"/>

		

        <threadpool class="emds.epi.impl.queue.ThreadPool" maxitem="40" name="persistent.pool" pollingtime="1000" threads="20">
						
		     	
	       	 
			<error_behaviour retries="infinite" sleeptime="10000"/>

	    </threadpool>          

 		
 
        <threadpool class="emds.epi.impl.queue.ThreadPool" maxitem="40" name="volatile.pool" pollingtime="1000" threads="20">
	       			
	       	
	       			
			<error_behaviour retries="infinite" sleeptime="10000"/>

	    </threadpool>          

     <threadpool class="emds.epi.impl.queue.ThreadPool" maxitem="80" name="topic.pool" pollingtime="1000" threads="20">
						
		     	
	       	 
			<error_behaviour retries="infinite" sleeptime="10000"/>

	    </threadpool>  

	    
	    			    	            
        <queue class="emds.epi.impl.queue.VolatileQueueImpl" group="runtime" threadpool="volatile.pool" type="volatile">
        
                <strategy class="emds.epi.impl.queue.BestEffortStrategy" prefix="V"/>	
       
        		
        		
        		<quality enqueueTime="30000" limitToExtProducers="true" maxitem="500" stopOnLessMemory="false" type="ExternalEvent"/>
		</queue>
		        						
        <queue class="emds.epi.impl.queue.VolatileFifoQueueImpl" group="runtime" name="Fifo.Sequential" threadpool="volatile.pool" type="volatile">
        		
        		<strategy class="emds.epi.impl.queue.LocalFifoStrategy"/>	
        		
        		
        		
        		<quality enqueueTime="30000" limitToExtProducers="true" maxitem="500" stopOnLessMemory="false" type="ExternalEvent"/> 		
 		</queue>

        <queue class="emds.epi.impl.queue.PersistentCachedQueue" group="runtime" threadpool="persistent.pool" type="persistent">
        	
        	<persistence class="{database.queue.client}"/>	
        	<strategy class="emds.epi.impl.queue.BestEffortStrategy" prefix="P"/>	
        		
        </queue>

        <queue class="emds.epi.impl.queue.PersistentCachedQueueFifo" group="runtime" name="Fifo.Sequential" threadpool="persistent.pool" type="persistent">

      		<persistence class="{database.queue.client}"/>	
         	<strategy class="emds.epi.impl.queue.FifoStrategy"/>	

        </queue>
        
        
        
        <queue class="emds.epi.impl.queue.PersistentCachedQueue" group="topic" threadpool="topic.pool" type="persistent">
        	
        	<persistence class="{database.queue.client}" table="ORC_TOPIC_QUEUE"/>
        						
        	<strategy class="emds.epi.impl.queue.BestEffortStrategy"/>	
        		
        </queue>
        
        <queue class="{services.FifoQueue.class}" group="topic" name="Fifo.Sequential" threadpool="topic.pool" type="persistent">

      		<persistence class="{database.queue.client}" table="ORC_TOPIC_QUEUE"/>
      		        			
         	<strategy class="emds.epi.impl.queue.FifoStrategy"/>	

        </queue>
        
        		
		

 		<errorhandling>
 		
 			<default delay="{queue.delay:10}" maxDelay="{queue.maxDelay:-1}" maxDelayUnit="{queue.maxDelayUnit:SECOND}" maxRetry="{queue.maxRetry:3}" unit="{queue.unit:SECOND}"/>
 			          
 			<workitem class="EsbCellCallbackOperation" delay="30" maxRetry="25" unit="SECOND"/>
 			<workitem class="EsbCellOperation" delay="30" maxRetry="25" unit="SECOND"/>
 			<workitem class="EsbCellPublish" delay="30" maxRetry="25" unit="SECOND"/>
 			<workitem class="PartnerSendOperation" delay="30" maxRetry="25" unit="SECOND"/>
 			<workitem class="EsbCallWorkItem" delay="30" maxRetry="25" unit="SECOND"/>
 			<workitem class="EsbPublishlWorkItem" delay="30" maxRetry="25" unit="SECOND"/>
 			<workitem class="PartnerSendWorkItem" delay="30" maxRetry="25" unit="SECOND"/>
 		</errorhandling>

 		
 		
 		<system.event.handling>
			<workitem.event category="ERROR" workitem="*"/>
			<workitem.event category="{queue.warnlevel.ext.communication:ERROR}" workitem="WorkItemSendMessage"/>
			<workitem.event category="{queue.warnlevel.ext.communication:ERROR}" workitem="WorkItemServiceTask"/>
 		</system.event.handling>
 		 
    </service>
    
    
    <service class="emds.epi.impl.event.EventServiceImpl" name="EventEngine">
             
	  		<persistence class="emds.epi.impl.event.DummyEventPersistence" enabled="{EventEngine.event.persistence.mode#VOLATILE}"/>
             
	  		<persistence class="emds.epi.impl.event.FileEventPersistence" enabled="{EventEngine.event.persistence.mode#DURABLE}" path="{EventEngine.event.persistence.path}"/>
             
            <processor class="emds.epi.impl.event.EMailEventProcessor" enabled="{EventEngine.email.enabled}" group="SYSTEM_EVENT" mode="asynchron">
             
             	<smtpsetting smtphost="{EventEngine.email.smtphost}" smtpport="{EventEngine.email.smtpport}" smtppwd="{EventEngine.email.smtppwd}" smtpuser="{EventEngine.email.smtpuser}" stmpssl="{EventEngine.email.usessl}"/>
                          	
                <mailsetting from="{EventEngine.email.from}" subject="{EventEngine.email.subject}" to="{EventEngine.email.to}"/>
                			              
             	<sendoption delay="{EventEngine.email.delay[0]}" limit="{EventEngine.email.limit}" unit="{EventEngine.email.delay[1]}"/>
                          
                <strategy attach="{EventEngine.email.attach}" class="emds.epi.impl.event.EMailEventDetailCollector" enabled="{EventEngine.email.mode#DETAILED}" footer="{EventEngine.email.footer}" header="{EventEngine.email.header}" separator="{EventEngine.email.separator}">
                			 
								
					<format process_event="{EventEngine.email.process.event}" process_token_event="{EventEngine.email.process.token.event}" system_event="{EventEngine.email.system.event}" variable_entry="{EventEngine.email.variable}">
							 
												 
					</format>
                
                </strategy>
                
                <strategy body="{EventEngine.email.simple.body}" class="emds.epi.impl.event.EMailEventSimpleCollector" enabled="{EventEngine.email.mode#NOTIFY}"/>
                
           		<type>{EventEngine.email.type}</type>
           		<source>{EventEngine.email.source}</source>
				<header/>

            </processor>
                          
            <processor class="emds.epi.impl.processengine.ProcessMonitorEvent" group="PROCESS_EVENT" maxMessageListDepth="25" mode="synchron" name="ProcessMonitorEvent"/>
             
            <processor class="emds.epi.impl.event.SystemEventProcessor" group="SYSTEM_EVENT" mode="asynchron"/>
              
            <processor class="emds.epi.impl.event.EventHistoryProcessor" group="SYSTEM_EVENT" mode="asynchron">
           		<type>*</type>
           		<source>*</source>
            </processor>
           
            <processor class="emds.epi.impl.event.FileEventProcessor" enabled="{EventEngine.file.enabled}" group="SYSTEM_EVENT" mode="asynchron">
             			
           		<type>{EventEngine.file.type}</type>
           		<source>{EventEngine.file.source}</source>
             	<path>{EventEngine.file.path}</path>
             </processor>           
                         
		     <processor class="emds.epi.impl.event.ScenarioEventLogHandler" enabled="{EventEngine.scenario.log.enabled}" group="SYSTEM_EVENT,PROCESS_EVENT" mode="synchron">
				
				<type>INFO,WARNING,ERROR</type>
				<source>*</source>
				
				<format maxvarsize="{EventEngine.scenario.log.maxvarsize}" process_event="{EventEngine.scenario.log.process.event}" process_token_event="{EventEngine.scenario.log.process.token.event}" system_event="{EventEngine.scenario.log.system.event}" variable_entry="{EventEngine.scenario.log.variable}">
						 
					<property length="20" name="EVENT.ORIGINATOR"/>
					<property length="6" name="EVENT.TYPE"/>
					<property length="18" name="EVENT.ACTION"/>
					<property length="30" name="EVENT.OCCURANCE"/>
					<property length="42" name="PROCESS.ID"/>
					<property length="40" name="PROCESS.NAME"/>
					<property length="40" name="SCENARIO.NAME"/>
					<property length="36" name="SCENARIO.ID"/>
					<property length="80" name="EVENT.INFO"/>
					<property length="20" name="TOKEN.ACTIVITY"/>						 
						 
				</format>
						 	   
		     </processor>
		     
		     <processor class="emds.epi.impl.event.PublishEventProcessor" enabled="false" group="SYSTEM_EVENT,PROCESS_EVENT" mode="asynchron">
             	<type>*</type>
				<source>*</source>
             </processor>		
             
			<processor class="emds.epi.impl.event.SignalEventProcessor" enabled="{EventEngine.signal.enabled}" group="SYSTEM_EVENT,PROCESS_EVENT" mode="synchron" name="SignalEventProcessor">
					   
					<type>ERROR</type>
					<source>*</source>
			</processor>		

			             
		
    </service>
    
    
    
    <service class="emds.epi.impl.communicationengine.AdapterFrameworkImpl" name="CommunicationEngine">
		<persistence class="emds.epi.impl.communicationengine.HibernateAdapterStatePersistence"/>
		<scheduling maxinstance="30"/> 
    </service>

    

    <service class="emds.epi.impl.landscapedirectory.LandscapeDirectoryImpl" name="LandscapeDirectory">
             
             <support class="emds.epi.impl.adapter.sap.LandscapeDestinationDataProvider" enabled="{adapter.sap.jco.enabled}"/>
             <support class="emds.epi.impl.adapter.sap.LandscapeServerDataProvider" enabled="{adapter.sap.jco.enabled}"/>
             
    </service>
    
          
      
    

    <service class="emds.epi.impl.processengine.core.ProcessEngineImpl" name="ProcessEngine">

			
			
			
			
			
			

            <parameter name="DEFAULT_TRACE_MODE" value="4"/> 
            <parameter name="PROCESS_EVENT_MODE" value="{EventEngine.process.mode}"/> 
            <parameter name="SEND_EVENT_ON_ABORT" value="{ProcessEngine.send.errorevent.on.abort:false}"/> 

			<instance_state_volatile class="emds.epi.impl.processengine.ProcessStateManagerVolatile"/>
			<instance_state_persistent class="emds.epi.impl.processengine.ProcessStateManagerPersistent" useLocalStrategy="{runtime.mode#STANDALONE}"/>

			<restart_strategy class="emds.epi.impl.processengine.EmptyRecoveryStrategy" mode="0"/>
			
			<restart_strategy class="emds.epi.impl.processengine.EmptyRecoveryStrategy" mode="1"/>
	
			<restart_strategy class="emds.epi.impl.processengine.RestartRecoveryStrategy" mode="2"/>

			<state_persistence class="emds.epi.impl.processengine.HibernateProcessStatePersistence"/>

			<recovery_manager class="emds.epi.impl.processengine.StandardRecoveryManager"/>

			<quality maxfifoqueue="100"/>

			<processhandler class="emds.epi.impl.processengine.core.VolatileProcessHandlerServer" type="volatile"/>
			<processhandler class="emds.epi.impl.processengine.core.PersistentProcessHandler" type="persistent"/>

			<schedule_strategy class="emds.epi.impl.processengine.core.BestEffortProcessSchedule" type="best_effort"/>
			
			<schedule_strategy class="emds.epi.impl.processengine.core.FifoProcessSchedule" handler="2" type="first_in_first_out">
				<persistent class="{services.FifoList.class}"/>
				<volatile class="emds.epi.impl.processengine.core.VolatileCachedFifoStateList"/>
				<volatile_with_recovery class="emds.epi.impl.processengine.core.VolatileWithRecoveryPersistentCachedFifoStateList"/>
			</schedule_strategy>
			
			<schedulepriority type="LOW">
			
				<priority category="default" value="15"/> 
				<priority category="ExternalEvent" value="10"/> 

				
				 
			</schedulepriority>
			
			<schedulepriority type="NORMAL">
				<priority category="default" value="25"/> 
				<priority category="ExternalEvent" value="20"/> 

				
			</schedulepriority>

			<schedulepriority type="HIGH">

				<priority category="default" value="35"/> 
				<priority category="ExternalEvent" value="30"/> 

				
			</schedulepriority>
			
    </service>
  
    <service class="emds.epi.impl.adapter.http.inbound.SimpleServletEngine" name="ServletEngine">

	  		<parameter name="MINTHREADS" value="10"/> 
	  		<parameter name="MAXTHREADS" value="20"/> 
	  		<parameter name="LOWTHREADS" value="15"/> 
	  		<parameter name="SPAWNORSHRINKAT" value="2"/> 
	  		<parameter name="STANDARDPORT" value="{Http.servlet.port.http}"/> 
	  		<parameter name="MAXIDLETIME" value="30000"/> 
	  		<parameter name="ACCEPTORS" value="2"/> 
	  		<parameter name="LOWRESOURCECONNECTIONS" value="5000"/> 
	  		<parameter name="SSLPORT" value="{Http.servlet.port.https}"/> 
	  		<parameter name="SSLPORT.AUTH" value="{Http.servlet.port.https.auth}"/> 
	  		<parameter name="SSLPORT.CERT.VALIDITY" value="true"/> 
	  		<parameter name="SSLPORT.CERT.CHAIN" value="false"/> 
	  		<parameter name="SSLPORT.CERT.CIPHERS" value=""/> 

			<processor auth="{Http.WebDavMaster.auth}" class="emds.epi.impl.adapter.http.webdav.WebDavMaster" enabled="{Http.WebDavMaster.enabled#true}" name="WEBDAV.MASTER" webdav="{Http.WebDavMaster.allowed}"/>
						
			<processor auth="0" class="emds.epi.impl.security.ChangePasswordServlet" enabled="true" name="ChangePasswordServlet"/>

			<processor auth="0" class="emds.epi.impl.adapter.http.inbound.jetty.SimpleResourceServer" enabled="true" name="SimpleResourceServer"/>

			<processor auth="1" class="emds.epi.impl.remoteservice.RemoteSoapService" enabled="true" interface="emds.epi.decl.server.event.monitor.SystemEventMonitor" name="RemoteService.SystemEvents" service="SystemEventMonitor"/>
						
			<processor auth="1" class="emds.epi.impl.remoteservice.RemoteSoapService" enabled="true" interface="emds.epi.decl.server.processengine.monitor.UploadManager" name="RemoteService.UploadManager" service="UploadManager"/>						

			<processor auth="1" class="emds.epi.impl.remoteservice.RemoteSoapService" enabled="true" interface="emds.epi.decl.server.baseservices.ScenarioInfoService" name="RemoteService.ScenarioInfoService" service="ScenarioInfoService"/>


			<processor auth="1" class="emds.epi.impl.remoteservice.RemoteSoapService" enabled="true" interface="emds.epi.decl.server.landscape.LandscapeAdministration" name="RemoteService.LandscapeAdministration" service="LandscapeAdmin"/>
						
			<processor auth="1" class="emds.epi.impl.remoteservice.RemoteSoapService" enabled="true" interface="emds.epi.decl.server.communicationengine.AdapterMonitoring" name="RemoteService.AdapterMonitoring" service="AdapterMonitoring"/>	
						
			<processor auth="1" class="emds.epi.impl.remoteservice.RemoteSoapService" enabled="true" interface="emds.epi.decl.server.security.monitor.SecurityMonitor" name="RemoteService.SecurityMonitor" service="SecurityMonitor"/>
												
			<processor auth="1" class="emds.epi.impl.remoteservice.RemoteSoapService" enabled="true" interface="emds.epi.decl.server.log.LogService" name="RemoteService.LogService" service="LogService"/>	
						
			<processor auth="1" class="emds.epi.impl.remoteservice.RemoteSoapService" enabled="true" interface="emds.epi.decl.server.baseservices.MasterdataService" name="RemoteService.MasterdataService" service="MasterdataService"/>		

			<processor auth="1" class="emds.epi.impl.remoteservice.RemoteSoapService" enabled="true" interface="emds.epi.decl.server.processengine.monitor.ProcessMonitoring" name="RemoteService.ProcessMonitoring" service="ProcessMonitoring"/>	
						
			<processor auth="1" class="emds.epi.impl.remoteservice.RemoteSoapService" enabled="true" interface="emds.epi.decl.server.state.ServerLifecycle" name="RemoteService.ServerLifecycle" service="ServerLifecycle"/>	
						
			<processor auth="1" class="emds.epi.impl.remoteservice.RemoteSoapService" enabled="true" interface="emds.epi.decl.server.deployment.DeploymentService" name="RemoteService.DeploymentService" service="DeploymentService"/>	

			<processor auth="1" class="emds.epi.impl.remoteservice.RemoteSoapService" enabled="true" interface="emds.epi.decl.server.timer.monitor.TimerAdministration" name="RemoteService.TimerAdministration" service="TimerAdministration"/>	
						    
   			<processor auth="1" class="emds.epi.impl.remoteservice.RemoteSoapService" enabled="true" interface="emds.epi.decl.server.esb.monitor.EnterpriseServiceRegistryAdmin" name="RemoteService.EnterpriseServiceRegistry" service="EnterpriseServiceRegistryAdmin"/>						

   			<processor auth="1" class="emds.epi.impl.remoteservice.RemoteSoapService" enabled="true" interface="emds.epi.decl.server.kpi.monitor.KpiServiceMonitor" name="RemoteService.KpiServiceMonitor" service="KpiServiceMonitor"/>						
						
   			<processor auth="1" class="emds.epi.impl.remoteservice.RemoteSoapService" enabled="true" interface="emds.epi.decl.server.processengine.monitor.LongtimeArchiveMonitor" name="RemoteService.LongtimeArchiveMonitor" service="LongtimeArchiveMonitor"/>	

   			<processor auth="1" class="emds.epi.impl.remoteservice.RemoteSoapService" enabled="true" interface="emds.epi.decl.server.cellcom.monitor.CellCommunicationServiceMonitor" name="RemoteService.CellCommunicationServiceMonitor" service="CellCommunicationServiceMonitor"/>	
						
   			<processor auth="1" class="emds.epi.impl.remoteservice.RemoteSoapService" enabled="true" interface="emds.epi.decl.server.processengine.monitor.ProcessRecoveryIF" name="RemoteService.ProcessRecoveryIF" service="ProcessRecoveryIF"/>	
						
   			<processor auth="1" class="emds.epi.impl.remoteservice.RemoteSoapService" enabled="true" interface="emds.epi.decl.server.documentation.DocumentationService" name="RemoteService.DocumentationService" service="DocumentationService"/>					
						
			<processor auth="1" class="emds.epi.impl.remoteservice.RemoteSoapService" enabled="true" interface="soffico.alert.server.decl.monitor.AlertDataService" name="RemoteService.AlertDataService" service="AlertDataService"/>	
    </service>
  
    
    <service class="emds.epi.impl.archivestore.ArchiveServiceImpl" name="ArchiveService">
    </service>
    
    <service class="emds.epi.impl.mappingengine.MappingServiceImpl" name="MappingService">
             
             <scheduling maxinstance="50"/> 
    </service>    
    
    <service class="emds.epi.impl.processengine.expr.ExpressionEvaluatorServiceImpl" name="ExpressionEvaluatorService">

		<language class="emds.epi.impl.processengine.xpath.XPathFactory" name="XPath"/>

		<language class="emds.epi.impl.processengine.expr.JavaFactory" name="Java"/>

		<language class="emds.epi.impl.adapter.database.JoinFactory" name="Join"/>

    </service>
  
    <service class="{services.ServerLifecycle.class}" name="ServerLifecycle">
    </service>  
 
    
	<service class="emds.epi.impl.landscapedirectory.transaction.TransactionFactoryImpl" name="TransactionFactory">
			 
			 <talog class="emds.epi.impl.landscapedirectory.transaction.DatabaseTransactionLog"/>
			 
 	</service>
 	    
     <service class="{services.LockingService.class}" name="LockingService">
    </service>   

     <service class="{services.TransactionService.class}" name="TransactionService">
    </service>     
     
     <service class="{services.ClusterService.class}" name="ClusterService">
    </service>     
    
    
    <service class="emds.epi.impl.business.BusinessTransactionImpl" name="BusinessTransaction">
    </service>        


    <service class="emds.epi.impl.cellcom.CellCommunicationServiceImpl" name="CellCommunicationService" poolsize="{runtime.poolsize}" queuesize="{runtime.cellqueue:500}">

		
		 
		 <persistence class="emds.epi.impl.cellcom.CellPersistenceDatabase"/>
	
		
		  
          <keepalive period="25"/>
              
		

		<master class="emds.epi.impl.cellcom.CellMasterHandler">
                               
			<remotepeer class="emds.epi.impl.cellcom.TcpCommCellImpl" context="{runtime.outgoing}" endpoint="{runtime.peer.outgoing.%%.endpoint}" name="{%%}" password="{runtime.peer.outgoing.%%.password}" port="{runtime.peer.outgoing.%%.port}"/>
							
		</master>
		 
		

		<client class="emds.epi.impl.cellcom.CellClientHandler" port="{runtime.local.port}">
				
			<remotepeer class="emds.epi.impl.cellcom.TcpCommCellImpl" context="{runtime.ingoing}" endpoint="{runtime.peer.ingoing.%%.endpoint}" name="{%%}" password="{runtime.peer.ingoing.%%.password}"/>
				
		</client>
		
		<router class="emds.epi.impl.cellcom.CellRouter" hopcount="{runtime.hopcount}">
			
			<remote_peer context="{runtime.routing}" name="{%%}" reachableby="{runtime.target.%%.router}"/>
		</router>
				
    </service> 
   
     <service class="emds.epi.impl.esb.EnterpriseServiceRegistryImpl" name="EnterpriseServiceRegistry">
              
    	<bindings>
    		<bindingfactory class="emds.epi.impl.esb.OrchestraBindingFactory"/>
    		<bindingfactory class="emds.epi.impl.esb.SOAPOverHTTPBindingFactory"/>
    	</bindings>
    	
    	<persistence class="emds.epi.impl.esb.EsbPersistenceDatabase"/>
              
    </service>  
    
     <service class="{services.EnterpriseServiceRegistryAdmin.class}" name="EnterpriseServiceRegistryAdmin">              
    </service>         
   
     <service class="emds.epi.impl.MessageDispatcher.MessageDispatcherImpl" name="MessageDispatcher">

		<VolatileWaitList class="emds.epi.impl.MessageDispatcher.VolatileProcessWaitList"/>
		<PersistentWaitList class="emds.epi.impl.MessageDispatcher.PersistentProcessWaitList"/>
              
    </service> 

    <service class="emds.epi.impl.baseservice.IdentityServiceImpl" name="IdentityService">
              
              <strategy class="emds.epi.impl.baseservice.HiLoStrategyImpl" name="HILO"/>

              <strategy class="emds.epi.impl.baseservice.NumberStrategyImpl" name="SEQUENCE"/>

              <strategy class="emds.epi.impl.baseservice.NumberStrategyImpl" name="EXT_SEQUENCE"/>

              <strategy class="emds.epi.impl.baseservice.StringStrategyImpl" name="LOCALIDENT"/>

    </service>         
    
    <service class="emds.epi.impl.ScriptService.ScriptServiceImpl" name="ScriptService">
    </service>        
    
     <service class="emds.epi.impl.partner.PartnerServiceImpl" name="PartnerService">
    </service>

     <service archivpath="{longtimearchive.file.path}" automaticDeletion="{longtimearchive.automaticDeletion}" class="{longtimearchive.class}" name="LongtimeArchive">
    </service>



     <service class="emds.epi.impl.monitor.DistributedMonitoringServiceImpl" name="DistributedMonitoringService">
              
              <urlpattern value="%PROTOCOL%://%HOST%:%PORT%/OrchestraRemoteService/%SERVICE%/Service"/>
     </service>

    <service class="emds.epi.impl.kpi.KpiServiceImpl" name="KpiService">
                            
              <eventDimension>
	  			  <dimension description="Scenario identifier" identifier="SCENARIO"/>
	  			  <dimension description="Orchestra server node" identifier="NODE"/>
	  			  <dimension description="Scenrio element reference" identifier="REFERENCE"/>
	  			  <dimension description="Name of the scenario element" identifier="NAME"/>
	  			  <dimension description="Type/Subtype of the referenced element. In case of a channel the channel type" identifier="TYPE"/>
	  			  <dimension description="Alias" identifier="BUSINESSGROUP"/>
	  			  <dimension description="Public signal name" identifier="SIGNAL"/>
  			  </eventDimension>					
  			  
  			  <businessEventTypes>

	    		 <eventType dimensions="SCENARIO,REFERENCE,NODE,BUSINESSGROUP" identifier="CHANNEL.OUT.QUEUE.INIT" mode="internal"/>

	    		 <eventType description="Event: invocation of outbound channel placed into queue" dimensions="SCENARIO,REFERENCE,NODE,BUSINESSGROUP" identifier="CHANNEL.OUT.ENQUEUE"/>

	    		 <eventType description="Event: invocation of outbound channel removed from queue" dimensions="SCENARIO,REFERENCE,NODE,BUSINESSGROUP" identifier="CHANNEL.OUT.DEQUEUE"/>
  			  
	    		 <eventType description="Event: external request received by channel" dimensions="SCENARIO,REFERENCE,NODE,BUSINESSGROUP" identifier="CHANNEL.IN.INVOCATION"/>
  
	    		 <eventType description="Event: external request successfully processed" dimensions="SCENARIO,REFERENCE,NODE,BUSINESSGROUP" identifier="CHANNEL.IN.INVOCATION.OK"/>
				
	    		 <eventType description="Event: external request with error" dimensions="SCENARIO,REFERENCE,NODE,BUSINESSGROUP" identifier="CHANNEL.IN.INVOCATION.ERR"/>
     			  					
	    		 <eventType description="Event: processing of outbound invocation started" dimensions="SCENARIO,REFERENCE,NODE,BUSINESSGROUP" identifier="CHANNEL.OUT.INVOCATION"/>
  
	    		 <eventType description="Event: processing of outbound invocation finished successfull" dimensions="SCENARIO,REFERENCE,NODE,BUSINESSGROUP" identifier="CHANNEL.OUT.INVOCATION.OK"/>
				
	    		 <eventType description="Event: processing of outbound invocation finished with error" dimensions="SCENARIO,REFERENCE,NODE,BUSINESSGROUP" identifier="CHANNEL.OUT.INVOCATION.ERR"/>

	    		 <eventType dimensions="NODE" identifier="VM.MEM.AVAIL" mode="internal"/>
	  			  					
	    		 <eventType dimensions="NODE" identifier="VM.MEM.USED" mode="internal"/>
	
	    		 <eventType dimensions="NODE" identifier="SYS.MEM.AVAIL" mode="internal"/>
	  			  					
	    		 <eventType dimensions="NODE" identifier="SYS.MEM.USED" mode="internal"/>
	  			  					
	    		 <eventType dimensions="NODE" identifier="SYS.CPU" mode="internal"/>			  					
	  			  			
	    		 <eventType description="Event: A processinstance was created as paused" dimensions="NODE,SCENARIO,REFERENCE" identifier="PROCESS.CREATED"/>  	  			  			

	    		 <eventType description="Event: A processinstance was switched from paused to running" dimensions="NODE,SCENARIO,REFERENCE" identifier="PROCESS.PAUSED_RUNNING"/>  	  			  			

	    		 <eventType description="Event: A processinstance was switched from paused to running" dimensions="NODE,SCENARIO,REFERENCE" identifier="PROCESS.PAUSED_ABORTED"/>  	  			  			
	
	    		 <eventType description="Event: A processinstance switched to warning state" dimensions="NODE,SCENARIO,REFERENCE" identifier="PROCESS.WARNING"/>  	  			  			
	
	    		 <eventType description="Event: A processinstance was aborted" dimensions="NODE,SCENARIO,REFERENCE" identifier="PROCESS.ABORTED"/>  	  			  			
	
	    		 <eventType description="Event: A processinstance was completed" dimensions="NODE,SCENARIO,REFERENCE" identifier="PROCESS.COMPLETED"/>  	  			  			

	    		 <eventType description="Event: A processinstance was recoverd from warning state" dimensions="NODE,SCENARIO,REFERENCE" identifier="PROCESS.WARNING_RESUMED"/>  	  			  			

	    		 <eventType description="Event: A processinstance was aborted from warning state" dimensions="NODE,SCENARIO,REFERENCE" identifier="PROCESS.WARNING_ABORTED"/>  	  			  			
	  			  	
	    		 <eventType description="Event: A signal was published" dimensions="NODE,SIGNAL,REFERENCE" identifier="SIGNAL.PUBLISH"/>  		  			  	
	  	
	    		 <eventType description="Event: A signal was received by a topic" dimensions="NODE,SIGNAL,REFERENCE,SCENARIO" identifier="SIGNAL.RECEIVED"/>  		  			  	
	  	
	    		 <eventType description="Event: A topic was processed" dimensions="NODE,SIGNAL,REFERENCE,SCENARIO" identifier="SIGNAL.PROCESSED"/>  		  			  	

	    		 <eventType description="Event: A topic was put into the queue" dimensions="NODE,SIGNAL,REFERENCE,SCENARIO" identifier="SIGNAL.QUEUED"/>  		  			  	

	    		 <eventType description="Event: A topic was removed from the queue" dimensions="NODE,SIGNAL,REFERENCE,SCENARIO" identifier="SIGNAL.DEQUEUED"/>  		  			  	

	    		 <eventType dimensions="NODE,SIGNAL" identifier="TEST.KPI"/>  
	  			  			
	    		 <eventType dimensions="NODE,SCENARIO" identifier="SYSTEM.EVENT.INFO" mode="internal"/>  	  			  			
	  			  			
	    		 <eventType dimensions="NODE,SCENARIO" identifier="SYSTEM.EVENT.ERROR" mode="internal"/>  	  			  			

	    		 <eventType dimensions="NODE,SCENARIO" identifier="SYSTEM.EVENT.WARNING" mode="internal"/>  	  			  			

  			  </businessEventTypes>  	 
  			  <persistence class="emds.epi.impl.kpi.KPIPersistenceDatabase"/>
  			  				
  			  <writeDelay after="2" unit="SECOND"/>
  			  <cleanupDelay after="1" unit="MINUTE"/>

   			  <kpiClasses>

	    		 <kpiClass class="KpiClassToggle" description="Number of pending channel invocations" dimensions="SCENARIO,REFERENCE,NODE,BUSINESSGROUP" eventGroup="Channel" identifier="CHANNEL.OUT.INVOCATION.QUEUESIZE" resetOnStart="true" sampleRate="1,HOUR" timeline="true" type="KPI_NULL_STRATEGY" windowSize="7,DAY">

	  			  	<eventEdge eventType="CHANNEL.OUT.ENQUEUE" stepSize="1"/>
	  			  	<eventEdge eventType="CHANNEL.OUT.DEQUEUE" stepSize="-1"/>
	  			  	<resetEdge eventType="CHANNEL.OUT.QUEUE.INIT"/>

	  			  </kpiClass>

	    		 <kpiClass class="KpiClassEvent" description="Total number ingoing channel requests" eventGroup="Channel" eventType="CHANNEL.IN.INVOCATION" identifier="CHANNEL.IN.INVOCATION" sampleRate="1,HOUR" timeline="true" type="KPI_NULL_STRATEGY" windowSize="7,DAY"/>
  
	    		 <kpiClass class="KpiClassEvent" description="total number of successfull invocations" eventGroup="Channel" eventType="CHANNEL.IN.INVOCATION.OK" identifier="CHANNEL.IN.INVOCATION.OK" sampleRate="1,HOUR" timeline="true" type="KPI_NULL_STRATEGY" windowSize="7,DAY"/>
				
	    		 <kpiClass class="KpiClassEvent" description="total number of errnous channel invocations" eventGroup="Channel" eventType="CHANNEL.IN.INVOCATION.ERR" identifier="CHANNEL.IN.INVOCATION.ERR" sampleRate="1,HOUR" timeline="true" type="KPI_NULL_STRATEGY" windowSize="7,DAY"/>
     			  					
	    		 <kpiClass class="KpiClassEvent" description="Overall number of channel invocations" eventGroup="Channel" eventType="CHANNEL.OUT.INVOCATION" identifier="CHANNEL.OUT.INVOCATION" sampleRate="1,HOUR" timeline="true" type="KPI_NULL_STRATEGY" windowSize="7,DAY"/>
  
	    		 <kpiClass class="KpiClassEvent" description="total number of successfull invocations" eventGroup="Channel" eventType="CHANNEL.OUT.INVOCATION.OK" identifier="CHANNEL.OUT.INVOCATION.OK" sampleRate="1,HOUR" timeline="true" type="KPI_NULL_STRATEGY" windowSize="7,DAY"/>
				
	    		 <kpiClass class="KpiClassEvent" description="total number of errnous channel invocations" eventGroup="Channel" eventType="CHANNEL.OUT.INVOCATION.ERR" identifier="CHANNEL.OUT.INVOCATION.ERR" sampleRate="1,HOUR" timeline="true" type="KPI_NULL_STRATEGY" windowSize="7,DAY"/>

	    		 <kpiClass class="KpiClassEvent" description="Available virtual machine memory" eventGroup="System" eventType="VM.MEM.AVAIL" identifier="VM.MEM.AVAIL" sampleRate="15,SECOND" timeline="true" type="KPI_ABSULUTE_LONG_STRATEGY" windowSize="5,MINUTE"/>
	  			  					
	    		 <kpiClass class="KpiClassEvent" description="Used virtual machine memory" eventGroup="System" eventType="VM.MEM.USED" identifier="VM.MEM.USED" sampleRate="7,SECOND" timeline="true" type="KPI_ABSULUTE_LONG_STRATEGY" windowSize="5,MINUTE"/>
	
	    		 <kpiClass class="KpiClassEvent" description="Available system memory" eventGroup="System" eventType="SYS.MEM.AVAIL" identifier="SYS.MEM.AVAIL" sampleRate="15,SECOND" timeline="true" type="KPI_ABSULUTE_LONG_STRATEGY" windowSize="5,MINUTE"/>
	  			  					
	    		 <kpiClass class="KpiClassEvent" description="Used system memory" eventGroup="System" eventType="SYS.MEM.USED" identifier="SYS.MEM.USED" sampleRate="7,SECOND" timeline="true" type="KPI_ABSULUTE_LONG_STRATEGY" windowSize="5,MINUTE"/>
	  			  					
	    		 <kpiClass class="KpiClassEvent" description="Cpu usage in percent" eventGroup="System" eventType="SYS.CPU" identifier="SYS.CPU" sampleRate="7,SECOND" timeline="true" type="KPI_ABSULUTE_DOUBLE_STRATEGY" windowSize="5,MINUTE"/>			  					
	  			  			
	    		 <kpiClass class="KpiClassEvent" description="Total number of created processes" eventGroup="Process" eventType="PROCESS.CREATED" identifier="PROCESS.CREATED" sampleRate="10,MINUTE" timeline="true" type="KPI_NULL_STRATEGY" windowSize="{Housekeeping.ProcessCleanup.SUCCESS.cleanup}"/>  	  			  			
	
	    		 <kpiClass class="KpiClassEvent" description="Total number of processes in state warning" eventGroup="Process" eventType="PROCESS.WARNING" identifier="PROCESS.WARNING" sampleRate="10,MINUTE" timeline="true" type="KPI_NULL_STRATEGY" windowSize="{Housekeeping.ProcessCleanup.SUCCESS.cleanup}"/>  	  			  			
	
	    		 <kpiClass class="KpiClassEvent" description="Total number of aborted processes" eventGroup="Process" eventType="PROCESS.ABORTED" identifier="PROCESS.ABORTED" sampleRate="10,MINUTE" timeline="true" type="KPI_NULL_STRATEGY" windowSize="{Housekeeping.ProcessCleanup.FAILURE.cleanup}"/>  	  			  			
	
	    		 <kpiClass class="KpiClassEvent" description="Total number of completed processes" eventGroup="Process" eventType="PROCESS.COMPLETED" identifier="PROCESS.COMPLETED" sampleRate="10,MINUTE" timeline="true" type="KPI_AVERAGE_LONG_STRATEGY" windowSize="{Housekeeping.ProcessCleanup.SUCCESS.cleanup}"/>  	  			  			


	    		 <kpiClass class="KpiClassToggle" description="Total number of paused processes" dimensions="SCENARIO,REFERENCE,NODE,BUSINESSGROUP" eventGroup="Channel" identifier="PROCESS.PAUSED" resetOnStart="true" sampleRate="1,HOUR" timeline="true" type="KPI_NULL_STRATEGY" windowSize="7,DAY">

		  			  	<eventEdge eventType="PROCESS.CREATED" stepSize="1"/>
		  			  	<eventEdge eventType="PROCESS.PAUSED_RUNNING" stepSize="-1"/>
		  			  	<eventEdge eventType="PROCESS.PAUSED_ABORTED" stepSize="-1"/>

	  			  </kpiClass>

	    		 <kpiClass class="KpiClassToggle" description="Total number of paused processes" dimensions="SCENARIO,REFERENCE,NODE,BUSINESSGROUP" eventGroup="Channel" identifier="PROCESS.RUNNING" resetOnStart="true" sampleRate="1,HOUR" timeline="true" type="KPI_NULL_STRATEGY" windowSize="7,DAY">

		  			  	<eventEdge eventType="PROCESS.PAUSED_RUNNING" stepSize="1"/>
		  			  	<eventEdge eventType="PROCESS.WARNING_RESUMED" stepSize="1"/>
		  			  	<eventEdge eventType="PROCESS.COMPLETED" stepSize="-1"/>
		  			  	<eventEdge eventType="PROCESS.ABORTED" stepSize="-1"/>
		  			  	<eventEdge eventType="PROCESS.WARNING" stepSize="-1"/>
	  			  </kpiClass>

	  			  	
	    		 <kpiClass class="KpiClassEvent" description="Total number of published signals" eventGroup="Process" eventType="SIGNAL.PUBLISH" identifier="SIGNAL.PUBLISH" sampleRate="1,HOUR" timeline="true" type="KPI_NULL_STRATEGY" windowSize="{Housekeeping.ProcessCleanup.SUCCESS.cleanup}"/>  		  			  	
	  	
	    		 <kpiClass class="KpiClassEvent" description="Total number of received topics" eventGroup="Process" eventType="SIGNAL.RECEIVED" identifier="SIGNAL.RECEIVED" sampleRate="1,HOUR" timeline="true" type="KPI_NULL_STRATEGY" windowSize="7,DAY"/>  		  			  	
	  	
	    		 <kpiClass class="KpiClassEvent" description="Total number of signals processed by this topic" eventGroup="Process" eventType="SIGNAL.PROCESSED" identifier="SIGNAL.PROCESSED" sampleRate="1,HOUR" timeline="true" type="KPI_NULL_STRATEGY" windowSize="{Housekeeping.ProcessCleanup.SUCCESS.cleanup}"/>  		  			  	

	    		 <kpiClass class="KpiClassToggle" description="Actual number of pending signals" dimensions="NODE,SIGNAL,REFERENCE,SCENARIO" eventGroup="Process" identifier="SIGNAL.WAITING" resetOnStart="true" sampleRate="1,HOUR" timeline="true" type="KPI_NULL_STRATEGY" windowSize="7,DAY">

		  			  	<eventEdge eventType="SIGNAL.QUEUED" stepSize="1"/>
		  			  	<eventEdge eventType="SIGNAL.DEQUEUED" stepSize="-1"/>
	  			  </kpiClass>

		 			  			
	    		 <kpiClass class="KpiClassEvent" description="Total number of system info messages" eventGroup="Event" eventType="SYSTEM.EVENT.INFO" identifier="SYSTEM.EVENT.INFO" sampleRate="1,HOUR" timeline="true" type="KPI_NULL_STRATEGY" windowSize="7,DAY"/>  	  			  			
	  			  			
	    		 <kpiClass class="KpiClassEvent" description="Total number of system error messages" eventGroup="Event" eventType="SYSTEM.EVENT.ERROR" identifier="SYSTEM.EVENT.ERROR" sampleRate="1,HOUR" timeline="true" type="KPI_NULL_STRATEGY" windowSize="7,DAY"/>  	  			  			

	    		 <kpiClass class="KpiClassEvent" description="Total number of system warning messages" eventGroup="Event" eventType="SYSTEM.EVENT.WARNING" identifier="SYSTEM.EVENT.WARNING" sampleRate="1,HOUR" timeline="true" type="KPI_NULL_STRATEGY" windowSize="7,DAY"/>  	  			  			

  			</kpiClasses>	  			
  
  			 
  			 					
  			 <handlers class="emds.epi.impl.kpi.MachineUsageHandler" name="MachineUsageHandler">
  			 		<resolution delay="15" unit="SECOND"/>
  			 </handlers>
  			 					
    </service>         
    

   

	
    <service class="soffico.alert.server.runtime.AlertDataServiceImpl" name="AlertDataService"> 
        
             

    	<variableSource service="KpiService"/>
    	<variableSource service="CommunicationEngine"/>
    	<variableSource service="ProcessEngine"/>
    	
	</service>
		
	
    <service class="soffico.alert.server.runtime.AlertRepositoryServiceImpl" name="AlertRepositoryService">
	</service>
	
	
	<service class="soffico.alert.server.runtime.RuntimeScenarioNameService" name="ScenarioNameService">
	</service>
	
	
	<service class="soffico.alert.server.runtime.AlertServiceImpl" name="AlertSubscriber">
             
    	<publisher service="KpiService"/>
    	<publisher service="CommunicationEngine"/>
    	<publisher service="ProcessEngine"/>
 
	</service>
    

    
 
    <service class="emds.epi.impl.cellcom.CellCommunicationServiceMonitorImpl" name="CellCommunicationServiceMonitor">
    </service>
       
    <service class="{services.AdapterMonitoring.class}" name="AdapterMonitoring">
    </service>

	<service class="{services.DeploymentService.class}" name="DeploymentService">
    </service>

	<service class="emds.epi.impl.kpi.KpiServiceMonitorImpl" name="KpiServiceMonitor">
    </service>

	<service class="{services.LandscapeAdmin.class}" name="LandscapeAdmin">
    </service>    

	

   <service class="{services.LogService.class}" name="LogService">
 
 		<group context="{logging.Groups}" name="{%%}">
 			
 			<directory filter="{logging.log.%%.filter}" id="{logging.log.%%.traces}" path="{logging.log.%%.path}"/>
 		</group>
 		 
    </service>   

	<service class="emds.epi.impl.processengine.archive.LongtimeArchiveMonitorImpl" name="LongtimeArchiveMonitor">
    </service>

	<service class="{services.ProcessMonitoring.class}" name="ProcessMonitoring">
             <kpimanager class="emds.epi.impl.processengine.kpi.ProcessKpiHandler"/>
   </service>
    
	<service class="{services.ProcessRecovery.class}" name="ProcessRecoveryIF">
    </service>     

	 <service class="emds.epi.impl.baseservice.ScenarioInfoServiceImpl" name="ScenarioInfoService">
     </service>

	<service class="emds.epi.impl.security.SecurityMonitorImpl" name="SecurityMonitor">
    </service>     

	<service class="emds.epi.impl.event.SystemEventMonitorImpl" name="SystemEventMonitor">
	</service>

	<service class="{services.TimerAdministration.class}" name="TimerAdministration">
	</service>

	<service class="emds.epi.impl.processengine.UploadManagerImpl" name="UploadManager">
    </service>
    
    <service class="emds.epi.impl.documentation.DocumentationServiceImpl" name="DocumentationService">
    </service>
    		 

</configuration>