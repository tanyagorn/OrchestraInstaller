copyright 2011-2012 Aaron Spear 
This work is released under the MIT license.  You can do whatever you wish with it, but I am absolutely 
not responsible for anything evil that may occur.

This code lives on github at:
https://github.com/aspear/izpack5-example-installer

This project is an example of how to create a working Izpack 5.x installer using maven as the build system.
I make no claims that it is a GOOD example, but it is an example that works.  I would be quite
happy to receive any feedback or ideas on how to improve it.

The project is broken into two pieces.  The panels directory contains a maven project that builds 
a jar containing the implementation of a custom panel.  In this case I just copied the HelloPanel.java that
is included as a part of IZpack and changed the name to prove the concept.  The "installer" sub directory 
contains the build of the installer itself that packages up the custom panel as a part of the installer.

to build:

cd panels
mvn clean install

cd ../installer
mvn clean package



15.6.2018 - 17.23pm
- variable username, password, servername, port => all DB type is set as one
(if need to be seperate, then just duplicate no. of variable is an easy dirty solution)
- already call gen_password.cmd in processPanel, but still need a way to utilize that value
- need to copy JDBC driver provided by user to folder or-WEB-lib <<< currently has no way to do with original Izpack,
  but there might be a way if integrate with ANT




- twoway ver write file

- build .class from .java
javac -cp .\* TwoWayPassword.java
jar cvf TwoWayPassword.java.jar TwoWayPassword.java.class

working:
Let TwoWayPassword edit environment_setting file directly, but we need a way to parse the location path of edit file first!!

use .class instead, place in security
- using .class works, but how can we parse variable there??
- custom java in panels directory
- just parse directly to java file currently located in Orchestra folder

error list:
index 63 caused by trying to parse .class file in install.xml

==========================

6.19.2018 : 12:24

- Edit HelloWorld.java in panels, then use mvn clean install
- Copy HelloWorld.class from panels/target to the same directory as install.xml, then convert .class to .jar by jar cvf TwoWayPassword.jar TwoWayPassword.class 
- mvn clean package

==========================

6.19.2018 : 2:23

- Edit HelloWorld.java in panels, then use mvn clean install
- To create jar with package structure, 
	cd D:\soffico\installer\OrchestraInstaller\panels\target\classes
	jar cvf HelloWorld.jar emds\epi\impl\security\HelloWorld.class

==========================

6.19.2018 : 10:20

- Complete encrypt username/password and replace in environment_setting.xml 
	procedure:
		edit .java file in panels src directory
		mvn clean install
		open another window folder suppose its name test, This folder must contains orchestra-commons-4.8.0.0-SNAPSHOT.jar
		convert .jar to .class
		copy .class from target panels to the right path emds\epi\impl\security
		then go back to the top level folder, parent of emds, then enter cmd with command jar cvf orchestra.jar
		copy orchestra.jar to the same directory as install.xml
		mvn clean package
		
==========================

7.02.2018 : 2:40

- Internationalization of Panels
- In need of Internationalization for custom panel (detect ISO variable and then make a file to support both languages)
- Select English -> %ISO3_LANG = eng, condition variable

==========================

7.11.2018 : 2:43

- JDBC completed 
- All internationalization of panels is completed
	Ref: https://izpack.atlassian.net/wiki/spaces/IZPACK/pages/491682/UserInputPanel

==========================

7.19.2018 : 11:40

- Integrate with flyway using maven; new Database directory
  File need to be substitute variable = child pom (pom.xml in orchestra-db directory)
  configuration part must be local (user specified)
- When installed successful, to migrate DB with Flyway, go to directory orchestra-db and type mvn compile flyway:migrate

==========================

7.19.2018 : 14:36
- add shell script to execute 'mvn compile flyway:migrate' command (No need to manually type in terminal)


==========================

Orchestra installer

Prerequisites before run the installer (as user):
- Tomcat installed, no need to do any configuration. The installer can do the configuration automatically.
  (see setenv.bat and setenv.sh in installer/src/.../izpack)
- Exists database with manually created user (The same Prerequisites as in Flyway DB Migration)

Functionalities in user scenarios:
- To launch the installer, simply run Orchestra-installer.jar located in installer/target directory
- Select your prefer language (Multi-language supports, currently in English and Deutsch)
- The installer simply asks for: 
	1. target path where Orchestra will be installed
	2. JDK Path (In case that auto-detection does not fail, this panel will be skipped)
	3. Packages selection, Orchestra Core and Runtime. Core is mandatory, while runtime is optional
	   The difference is the missing of Database directory in Core pack.
	4. If Orchestra Runtime pack is selected, the installer will navigate user to 
	   - Tomcat Directory panel
       - Database Selection panel
       - Database Configuration panel 
	   Those information provided by user will be used for configuration process. 
	   For example, the installer will automatically pre-configure tomcat directory and 
	   created url string for connecting to database.
- Processing Panel perform external processes from custom java file like encryped username/password,
  copy JDBC driver to destination, and migrate the existing database with Flyway
- Setup Shortcuts, create addtitional shortcut on the desktop (optional)

With successful installation, user will get Orchestra Designer, and also can connect to Orchestra Monitor via Tomcat.

******************************************************
For developers:

There are 4 directories including,
- flyway
- jav
- installer
- panels

flyway and jav are not need for building the installer. flyway directory is an original directory before
integrating in the installer. jav directory is just a temp directory for preparing jar file that will
be integrating to the installer, when there is a need to integrate additional custom jar file.

installer and panels directories are the core for building the installer.
Original source as foundation for all come from below.

******************************************************
copyright 2011-2012 Aaron Spear 
This work is released under the MIT license.  You can do whatever you wish with it, but I am absolutely 
not responsible for anything evil that may occur.

This code lives on github at:
https://github.com/aspear/izpack5-example-installer

This project is an example of how to create a working Izpack 5.x installer using maven as the build system.
I make no claims that it is a GOOD example, but it is an example that works.  I would be quite
happy to receive any feedback or ideas on how to improve it.

The project is broken into two pieces.  The panels directory contains a maven project that builds 
a jar containing the implementation of a custom panel.  In this case I just copied the HelloPanel.java that
is included as a part of IZpack and changed the name to prove the concept.  The "installer" sub directory 
contains the build of the installer itself that packages up the custom panel as a part of the installer.

to build:

cd panels
mvn clean install

cd ../installer
mvn clean package

******************************************************

In case that you didn't add custom panel/jar to the installer, you don't need to run 'mvn clean install',
just run 'mvn clean package' to build the installer is enough.

After build success, there will be Orchestra-installer.jar located in installer/target directory. This is
our installer.

To integrate custom java file into the installer (for example EncryptPassword.java, FileSystem.java)
- Place your custom java file into path 'panels/src/main/.../mypanels'
- cd panels and run 'mvn clean install'
- After build success, there will be .class file for all located in the path 'panels/target/classes/...'
- Copy those .class files into directory 'jav/test/...' make sure that the path is correct ( .class files should
be located as it should be referring to its package )
- cd jav/test (parent of emds), then run 'jar cvf orchestra.jar *'
- Copy orchestra.jar to the directory where install.xml is located (installer/src/main/izpack)
- run 'mvn clean package'

For additional information of how to use IzPack, please see at:
https://izpack.atlassian.net/wiki/spaces/IZPACK/pages/491528/IzPack+5
