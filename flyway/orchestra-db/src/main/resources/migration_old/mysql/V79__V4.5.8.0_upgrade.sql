CREATE TABLE IF NOT EXISTS orc_environment_settings (
  GROUP_NAME varchar(256) NOT NULL,
  PARAMETER_NAME varchar(256) NOT NULL,
  PARAMETER_VALUE varchar(1024) DEFAULT NULL,
  LAST_UPDATED_AT timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
  ADDED_AT timestamp NOT NULL DEFAULT '0000-00-00 00:00:00',
  IS_RUNTIME_MODIFIABLE tinyint(1) DEFAULT NULL,
  IS_MODIFIABLE tinyint(1) DEFAULT NULL,
  NODE_ID varchar(10) NOT NULL,
  VALUE_TYPE varchar(256) NOT NULL DEFAULT 'STRING',
  PRIMARY KEY (GROUP_NAME,PARAMETER_NAME, NODE_ID)
);

INSERT INTO `orc_sec_role_v2`(`OSR_SCENARIO`, `OSR_IDENTIFIER`, `OSR_DESC`) VALUES ('RUNTIME','RUNTIME:EnvironmentSettings.Reader','Allows reading of environment settings in monitor');
INSERT INTO `orc_sec_role_v2`(`OSR_SCENARIO`, `OSR_IDENTIFIER`, `OSR_DESC`) VALUES ('RUNTIME', 'RUNTIME:EnvironmentSettings.Writer', 'Allows changing of environment settings from the monitor');
INSERT INTO `orc_sec_user_roles_v2` (`OUR_USER_ID`, `OUR_ROLE_ID`) VALUES('RUNTIME:admin', 'EnvironmentSettings.Reader'),('RUNTIME:admin', 'EnvironmentSettings.Writer'),('RUNTIME:Monitor', 'EnvironmentSettings.Reader');

CREATE TABLE IF NOT EXISTS orc_worklist_type (
ID varchar(256) NOT NULL,
NAME varchar(256) NOT NULL,
DESCRIPTION varchar(512) DEFAULT NULL,
USER_STARTABLE tinyint(1) DEFAULT NULL,
ACTIVATION_TYPE varchar(256) NOT NULL,
CAN_COMPLETE tinyint(1) DEFAULT NULL,
CAN_START_PROCESS tinyint(1) DEFAULT NULL,
GROUP_NAME varchar(256),
GROUP_ID varchar(256),
TYPE_IMAGE blob,
PRIMARY KEY (ID)
);
CREATE TABLE IF NOT EXISTS orc_worklist_activation_http (
ID varchar(256) NOT NULL,
URL varchar(512) NOT NULL,
REQUEST_TYPE int(11) NOT NULL,
PRIMARY KEY (ID),
FOREIGN KEY (ID) REFERENCES orc_worklist_type(ID)
);
CREATE TABLE IF NOT EXISTS orc_worklist_activation_resource (
ID varchar(256) NOT NULL,
MODEL_TYPE varchar(256) DEFAULT NULL,
RESOURCE_BUNDLE varchar(256) DEFAULT NULL,
ROOT_RESOURCE varchar(256) DEFAULT NULL,
FINISH_RESOURCE varchar(256) DEFAULT NULL,
PRIMARY KEY (ID),
FOREIGN KEY (ID) REFERENCES orc_worklist_type(ID)
);
CREATE TABLE IF NOT EXISTS orc_worklist_activation_simple (
ID varchar(256) NOT NULL,
CAPTION varchar(256) DEFAULT NULL,
INFO_TEXT varchar(512) DEFAULT NULL,
BUTTON1 varchar(30) DEFAULT NULL,
BUTTON2 varchar(30) DEFAULT NULL,
BUTTON3 varchar(30) DEFAULT NULL,
PRIMARY KEY (ID),
FOREIGN KEY (ID) REFERENCES orc_worklist_type(ID)
);
CREATE TABLE IF NOT EXISTS orc_worklist_escalation (
ID varchar(256) NOT NULL,
EXPIRATION_TIME int(11) NOT NULL,
TIME_UNIT varchar(30) NOT NULL,
DELEGATE varchar(256) DEFAULT NULL,
RECEIVER varchar(256) DEFAULT NULL,
TYPE varchar(30) NOT NULL,
PRIMARY KEY (ID)
);
CREATE TABLE IF NOT EXISTS orc_worklist_item (
ID varchar(256) NOT NULL,
NAME varchar(256) NOT NULL,
CREATION_DATE timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP,
DESCRIPTION varchar(512) DEFAULT NULL,
PRIORITY int(10) DEFAULT NULL,
TYPE_ID varchar(256) NOT NULL,
CREDENTIAL_NAME varchar(256) NOT NULL,
COMPLETION_LISTENER_INFO blob,
NEXT_ESCALATION bigint(32) DEFAULT NULL,
STATE varchar(256) NOT NULL,
NUM_RETRIES int(11) DEFAULT '0',
NEXT_RETRY bigint(32) DEFAULT NULL,
PRIMARY KEY (ID),
FOREIGN KEY (TYPE_ID) REFERENCES orc_worklist_type(ID)
);
CREATE TABLE IF NOT EXISTS orc_worklist_parameter_declaration (
ID varchar(256) NOT NULL,
NAME varchar(512) NOT NULL,
DESCRIPTION varchar(256) DEFAULT NULL,
DIRECTION tinyint(1) DEFAULT NULL,
PARAMETER_TYPE varchar(256) NOT NULL,
TYPE_ID varchar(256) NOT NULL,
PRIMARY KEY (ID),
FOREIGN KEY (TYPE_ID) REFERENCES orc_worklist_type(ID)
);
CREATE TABLE IF NOT EXISTS orc_worklist_parameter_instance (
ID varchar(256) NOT NULL,
VALUE varchar(256) DEFAULT NULL,
ITEM_ID varchar(256) NOT NULL,
DECLARATION_ID varchar(256) NOT NULL,
PRIMARY KEY (ID),
FOREIGN KEY (ITEM_ID) REFERENCES orc_worklist_item(ID),
FOREIGN KEY (DECLARATION_ID) REFERENCES orc_worklist_parameter_declaration(ID)
);
CREATE TABLE IF NOT EXISTS orc_worklist_permission (
ID varchar(256) NOT NULL,
MODE tinyint(1) NOT NULL,
CREDENTIAL_NAME varchar(256) NOT NULL,
WORKLIST_TYPE_ID varchar(256) NOT NULL,
PRIMARY KEY (ID)
);
CREATE TABLE IF NOT EXISTS orc_worklist_resource_bundle (
ID varchar(256) NOT NULL,
DESCRIPTION varchar(256) DEFAULT NULL,
PRIMARY KEY (ID)
);
CREATE TABLE IF NOT EXISTS orc_worklist_resource (
NAME varchar(256) NOT NULL,
CONTENT_TYPE varchar(256) DEFAULT NULL,
CONTENT blob,
RESOURCE_BUNDLE varchar(256) NOT NULL,
PRIMARY KEY (NAME,RESOURCE_BUNDLE),
FOREIGN KEY (RESOURCE_BUNDLE) REFERENCES orc_worklist_resource_bundle(ID)
);
CREATE TABLE IF NOT EXISTS orc_worklist_type_escalation (
TYPE_ID varchar(256) NOT NULL DEFAULT '',
ESCALATION_ID varchar(256) NOT NULL DEFAULT '',
PRIMARY KEY (TYPE_ID,ESCALATION_ID),
FOREIGN KEY (ESCALATION_ID) REFERENCES orc_worklist_escalation(ID),
FOREIGN KEY (TYPE_ID) REFERENCES orc_worklist_type(ID)
);

CREATE TABLE ORC_PROCESS_FIFO_SCHEDULE_GRP(
	PFS_ID varchar(100) NOT NULL,
	PFS_SCENARIO varchar(256) NOT NULL,
	PFS_MODELL_REFERENCE varchar(256) NOT NULL,
	PFS_PROCESS_REFERENCE varchar(256) NOT NULL,
	PFS_TOKEN_REFERENCE varchar(256) NOT NULL,
	PFS_VARIABLES longblob NULL,
	PFS_TARGET_NODE varchar(256) NULL,
	PFS_STATE varchar(10) NOT NULL,
	PFS_OWNER_NODE varchar(256) NULL,
	PFS_LOGICAL_ORDER bigint(20) NOT NULL AUTO_INCREMENT,
	PFS_PROCESS_GROUP varchar(256) NOT NULL,
	
	PRIMARY KEY (PFS_PROCESS_REFERENCE),
  UNIQUE KEY `IDX_PROC_FIFO_GRP_KEY_AUTO` (`PFS_LOGICAL_ORDER`),
	KEY IDX_ORC_PROC_FIFO_GRP_MIN_ID ( PFS_MODELL_REFERENCE, PFS_PROCESS_GROUP , PFS_TARGET_NODE, PFS_STATE, PFS_ID, PFS_LOGICAL_ORDER ),
  KEY IDS_PROC_FIFO_GRP_DELETE ( PFS_STATE )
	);

CREATE TABLE ORC_PROCESS_FIFO_SCHEDULE_GRP_CACHE(
	PFS_ID varchar(100) NOT NULL,
	PFS_SCENARIO varchar(256) NOT NULL,
	PFS_MODELL_REFERENCE varchar(256) NOT NULL,
	PFS_PROCESS_REFERENCE varchar(256) NOT NULL,
	PFS_TOKEN_REFERENCE varchar(256) NOT NULL,
	PFS_VARIABLES longblob NULL,
	PFS_TARGET_NODE varchar(256) NULL,
	PFS_STATE varchar(10) NOT NULL,
	PFS_OWNER_NODE varchar(256) NULL,
	PFS_LOGICAL_ORDER bigint(20) NOT NULL AUTO_INCREMENT,
	PFS_PROCESS_GROUP varchar(256) NOT NULL,
	
	PRIMARY KEY (PFS_PROCESS_REFERENCE),
  UNIQUE KEY `IDX_PROC_FIFO_GRP_C_KEY_AUTO` (`PFS_LOGICAL_ORDER`),
	KEY IDX_ORC_PROC_FIFO_GRP_C_MIN_ID ( PFS_MODELL_REFERENCE, PFS_PROCESS_GROUP , PFS_TARGET_NODE, PFS_STATE, PFS_ID, PFS_LOGICAL_ORDER ),
  KEY IDS_PROC_FIFO_GRP_C_DELETE ( PFS_STATE )
	);

  ALTER TABLE ORC_PROCESS_RUNTIME_STATE add PRS_PROCESS_GROUP varchar(256);
  

  ALTER TABLE ORC_EVENT_PROCESS_TOKEN add EVT_IS_FULLSNAPSHOT tinyint(1);

CREATE TABLE `orc_human_interaction` (
  `HIN_SCENARIO` varchar(255) DEFAULT NULL,
  `HIN_NAME` varchar(255) DEFAULT NULL,
  `HIN_DATA` longblob,
  `HIN_DEPLOYED_AT` timestamp NULL DEFAULT NULL,
  `HIN_UNIQUE_NAME` varchar(255) NOT NULL,
  PRIMARY KEY (`HIN_UNIQUE_NAME`),
  UNIQUE KEY `PK_orc_human_interaction` (`HIN_UNIQUE_NAME`),
  UNIQUE KEY `UIDX_orc_human_interaction` (`HIN_NAME`,`HIN_SCENARIO`),
  KEY `IDX_ORC_PROCESS_MODELLS_SCEN` (`HIN_SCENARIO`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8;
-- db changes for filtering:
CREATE TABLE IF NOT EXISTS ORC_FILTERSETTINGS(
ORC_FILTERID INT NOT NULL PRIMARY KEY ,
ORC_FNAME VARCHAR(255),
ORC_ISCURRENT INT,
ORC_PARENT_USERID VARCHAR(255),
ORC_TABLECLASS VARCHAR(255),
CONSTRAINT fk_user_table foreign key(ORC_PARENT_USERID, ORC_TABLECLASS) REFERENCES  orc_monitor_tablesettings(ORC_PARENT_USERID, ORC_TABLECLASS));



CREATE TABLE IF NOT EXISTS ORC_FILTEREXPRESSIONS(
ORC_EXPRESSION_ID INT NOT NULL  PRIMARY KEY,
ORC_FCONDITION VARCHAR(255)		NOT NULL,
ORC_FVALUE VARCHAR(255)      NOT NULL,
ORC_TABLECOLUMN VARCHAR(255),
ORC_FILTERID INT REFERENCES ORC_FILTERSETTINGS(ORC_FILTERID)
);


CREATE TABLE IF NOT EXISTS ORC_USERFILTER(
ORC_FILTERID INT REFERENCES ORC_FILTERSETTINGS(ORC_FILTERID) ,
ORC_PARENT_USERID VARCHAR(255)REFERENCES ORC_MONITOR_TABLESETTINGS(ORC_PARENT_USERID) ,
ORC_TABLECLASS VARCHAR(255) REFERENCES ORC_MONITOR_TABLESETTINGS(ORC_TABLECLASS),
CONSTRAINT PRIMARY KEY(ORC_FILTERID,ORC_PARENT_USERID,ORC_TABLECLASS)
);

-- db changes for scenario grouping

CREATE TABLE IF NOT EXISTS ORC_SCENARIOGROUPS(
GROUP_NAME VARCHAR(256)PRIMARY KEY
);

CREATE TABLE IF NOT EXISTS ORC_SCENARIO_GROUP_RELATION(
GROUP_NAME VARCHAR(256) REFERENCES ORC_SCENARIOGROUPS(NAME),
SCENARIO_ID VARCHAR(255) REFERENCES ORC_PROCESS_SCENARIO(PSC_UNIQUE_NAME),
CONSTRAINT PRIMARY KEY(GROUP_NAME, SCENARIO_ID)
);

UPDATE ORC_MONITOR_TABLESETTINGS SET ORC_COLUMN_PATTERN='y,n,n,y,y,y,y,y,y,n,y' WHERE ORC_TABLECLASS='ScenarioTable';

UPDATE ORC_MONITOR_TABLESETTINGS SET ORC_COLUMN_PATTERN='y,y,n,y,n,y,y,y,y,y,n' WHERE ORC_TABLECLASS='ProcessOverviewTable';